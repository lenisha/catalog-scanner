// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ScannerBabylonService
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Scans.
    /// </summary>
    public static partial class ScansExtensions
    {
            /// <summary>
            /// Runs the scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static OperationResponse Run(this IScans operations, string dataSourceName, string scanName, ScanRunProperties body = default(ScanRunProperties))
            {
                return operations.RunAsync(dataSourceName, scanName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Runs the scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> RunAsync(this IScans operations, string dataSourceName, string scanName, ScanRunProperties body = default(ScanRunProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunWithHttpMessagesAsync(dataSourceName, scanName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void Cancel(this IScans operations, string dataSourceName, string scanName, CancelScanRequest body)
            {
                operations.CancelAsync(dataSourceName, scanName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelAsync(this IScans operations, string dataSourceName, string scanName, CancelScanRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelWithHttpMessagesAsync(dataSourceName, scanName, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the scan history of a scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='skipToken'>
            /// </param>
            public static ScanHistoryList ListHistory(this IScans operations, string dataSourceName, string scanName, string skipToken = default(string))
            {
                return operations.ListHistoryAsync(dataSourceName, scanName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the scan history of a scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='skipToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScanHistoryList> ListHistoryAsync(this IScans operations, string dataSourceName, string scanName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHistoryWithHttpMessagesAsync(dataSourceName, scanName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an instance of a scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Scan CreateOrUpdate(this IScans operations, string dataSourceName, string scanName, Scan body)
            {
                return operations.CreateOrUpdateAsync(dataSourceName, scanName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an instance of a scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Scan> CreateOrUpdateAsync(this IScans operations, string dataSourceName, string scanName, Scan body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(dataSourceName, scanName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a scan information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            public static Scan Get(this IScans operations, string dataSourceName, string scanName)
            {
                return operations.GetAsync(dataSourceName, scanName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a scan information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Scan> GetAsync(this IScans operations, string dataSourceName, string scanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(dataSourceName, scanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the scan associated with the data source
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            public static void Delete(this IScans operations, string dataSourceName, string scanName)
            {
                operations.DeleteAsync(dataSourceName, scanName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the scan associated with the data source
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IScans operations, string dataSourceName, string scanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(dataSourceName, scanName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List scans in data source
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='skipToken'>
            /// </param>
            public static ScanList ListByDataSource(this IScans operations, string dataSourceName, string skipToken = default(string))
            {
                return operations.ListByDataSourceAsync(dataSourceName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List scans in data source
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='skipToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScanList> ListByDataSourceAsync(this IScans operations, string dataSourceName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataSourceWithHttpMessagesAsync(dataSourceName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
