// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataCatalogGen2
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AccessControlREST.
    /// </summary>
    public static partial class AccessControlRESTExtensions
    {
            /// <summary>
            /// Creates an admin user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            public static void AddAdmin(this IAccessControlREST operations, string userId)
            {
                operations.AddAdminAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an admin user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddAdminAsync(this IAccessControlREST operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddAdminWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes an admin user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            public static void DeleteAdmin(this IAccessControlREST operations, string userId)
            {
                operations.DeleteAdminAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an admin user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAdminAsync(this IAccessControlREST operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAdminWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists admin users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<JsonAzureCatalogUser> GetAdmins(this IAccessControlREST operations)
            {
                return operations.GetAdminsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists admin users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAzureCatalogUser>> GetAdminsAsync(this IAccessControlREST operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdminsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
