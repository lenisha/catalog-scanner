// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataCatalogGen2.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AtlasAttributeDef
    /// </summary>
    /// <remarks>
    /// class that captures details of a struct-attribute.
    /// </remarks>
    public partial class JsonAtlasAttributeDef
    {
        /// <summary>
        /// Initializes a new instance of the JsonAtlasAttributeDef class.
        /// </summary>
        public JsonAtlasAttributeDef()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonAtlasAttributeDef class.
        /// </summary>
        /// <param name="cardinality">Possible values include: 'SINGLE',
        /// 'LIST', 'SET'</param>
        /// <param name="constraints">An array of constraints.</param>
        /// <param name="defaultValue">The default value of the
        /// attribute.</param>
        /// <param name="description">The description of the attribute.</param>
        /// <param name="includeInNotification">Determines if it is included in
        /// notification.</param>
        /// <param name="isIndexable">Determines if it is indexable.</param>
        /// <param name="isOptional">Determines if it is optional.</param>
        /// <param name="isUnique">Determines if it unique.</param>
        /// <param name="name">The name of the attribute.</param>
        /// <param name="options">The options for the attribute.</param>
        /// <param name="typeName">The name of the type.</param>
        /// <param name="valuesMaxCount">The maximum count of the
        /// values.</param>
        /// <param name="valuesMinCount">The minimum count of the
        /// values.</param>
        public JsonAtlasAttributeDef(string cardinality = default(string), IList<JsonAtlasConstraintDef> constraints = default(IList<JsonAtlasConstraintDef>), string defaultValue = default(string), string description = default(string), bool? includeInNotification = default(bool?), bool? isIndexable = default(bool?), bool? isOptional = default(bool?), bool? isUnique = default(bool?), string name = default(string), IDictionary<string, string> options = default(IDictionary<string, string>), string typeName = default(string), int? valuesMaxCount = default(int?), int? valuesMinCount = default(int?))
        {
            Cardinality = cardinality;
            Constraints = constraints;
            DefaultValue = defaultValue;
            Description = description;
            IncludeInNotification = includeInNotification;
            IsIndexable = isIndexable;
            IsOptional = isOptional;
            IsUnique = isUnique;
            Name = name;
            Options = options;
            TypeName = typeName;
            ValuesMaxCount = valuesMaxCount;
            ValuesMinCount = valuesMinCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'SINGLE', 'LIST', 'SET'
        /// </summary>
        [JsonProperty(PropertyName = "cardinality")]
        public string Cardinality { get; set; }

        /// <summary>
        /// Gets or sets an array of constraints.
        /// </summary>
        [JsonProperty(PropertyName = "constraints")]
        public IList<JsonAtlasConstraintDef> Constraints { get; set; }

        /// <summary>
        /// Gets or sets the default value of the attribute.
        /// </summary>
        [JsonProperty(PropertyName = "defaultValue")]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or sets the description of the attribute.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets determines if it is included in notification.
        /// </summary>
        [JsonProperty(PropertyName = "includeInNotification")]
        public bool? IncludeInNotification { get; set; }

        /// <summary>
        /// Gets or sets determines if it is indexable.
        /// </summary>
        [JsonProperty(PropertyName = "isIndexable")]
        public bool? IsIndexable { get; set; }

        /// <summary>
        /// Gets or sets determines if it is optional.
        /// </summary>
        [JsonProperty(PropertyName = "isOptional")]
        public bool? IsOptional { get; set; }

        /// <summary>
        /// Gets or sets determines if it unique.
        /// </summary>
        [JsonProperty(PropertyName = "isUnique")]
        public bool? IsUnique { get; set; }

        /// <summary>
        /// Gets or sets the name of the attribute.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the options for the attribute.
        /// </summary>
        [JsonProperty(PropertyName = "options")]
        public IDictionary<string, string> Options { get; set; }

        /// <summary>
        /// Gets or sets the name of the type.
        /// </summary>
        [JsonProperty(PropertyName = "typeName")]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or sets the maximum count of the values.
        /// </summary>
        [JsonProperty(PropertyName = "valuesMaxCount")]
        public int? ValuesMaxCount { get; set; }

        /// <summary>
        /// Gets or sets the minimum count of the values.
        /// </summary>
        [JsonProperty(PropertyName = "valuesMinCount")]
        public int? ValuesMinCount { get; set; }

    }
}
