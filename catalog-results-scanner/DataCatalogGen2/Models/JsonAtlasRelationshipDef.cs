// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataCatalogGen2.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AtlasRelationshipDef
    /// </summary>
    /// <remarks>
    /// AtlasRelationshipDef is a TypeDef that defines a relationship.
    /// &lt;p&gt;
    /// As with other typeDefs the AtlasRelationshipDef has a name. Once
    /// created the RelationshipDef has a guid.
    /// The name and the guid are the 2 ways that the RelationshipDef is
    /// identified.
    /// &lt;p&gt;
    /// RelationshipDefs have 2 ends, each of which specify cardinality, an
    /// EntityDef type name and name and optionally
    /// whether the end is a container.
    /// &lt;p&gt;
    /// RelationshipDefs can have AttributeDefs - though only primitive types
    /// are allowed. &lt;br&gt;
    /// RelationshipDefs have a relationshipCategory specifying the UML type of
    /// relationship required &lt;br&gt;
    /// RelationshipDefs also have a PropogateTag - indicating which way tags
    /// could flow over the relationships.
    /// &lt;p&gt;
    /// The way EntityDefs and RelationshipDefs are intended to be used is that
    /// EntityDefs will define AttributeDefs these AttributeDefs
    /// will not specify an EntityDef type name as their types.
    /// &lt;p&gt;
    /// RelationshipDefs introduce new atributes to the entity instances. For
    /// example
    /// &lt;p&gt;
    /// EntityDef A might have attributes attr1,attr2,attr3 &lt;br&gt;
    /// EntityDef B might have attributes attr4,attr5,attr6 &lt;br&gt;
    /// RelationshipDef AtoB might define 2 ends &lt;br&gt;
    ///
    /// &lt;pre&gt;
    /// end1:  type A, name attr7
    /// end2:  type B, name attr8  &lt;/pre&gt;
    ///
    /// &lt;p&gt;
    /// When an instance of EntityDef A is created, it will have attributes
    /// attr1,attr2,attr3,attr7 &lt;br&gt;
    /// When an instance of EntityDef B is created, it will have attributes
    /// attr4,attr5,attr6,attr8
    /// &lt;p&gt;
    /// In this way relationshipDefs can be authored separately from entityDefs
    /// and can inject relationship attributes into
    /// the entity instances
    /// </remarks>
    public partial class JsonAtlasRelationshipDef : JsonAtlasStructDef
    {
        /// <summary>
        /// Initializes a new instance of the JsonAtlasRelationshipDef class.
        /// </summary>
        public JsonAtlasRelationshipDef()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonAtlasRelationshipDef class.
        /// </summary>
        /// <param name="category">Possible values include: 'PRIMITIVE',
        /// 'OBJECT_ID_TYPE', 'ENUM', 'STRUCT', 'CLASSIFICATION', 'ENTITY',
        /// 'ARRAY', 'MAP', 'RELATIONSHIP'</param>
        /// <param name="createTime">The created time of the record.</param>
        /// <param name="createdBy">The user who created the record.</param>
        /// <param name="description">The description of the type
        /// definition.</param>
        /// <param name="guid">The GUID of the type definition.</param>
        /// <param name="name">The name of the type definition.</param>
        /// <param name="options">The options for the type definition.</param>
        /// <param name="typeVersion">The version of the type.</param>
        /// <param name="updateTime">The update time of the record.</param>
        /// <param name="updatedBy">The user who updated the record.</param>
        /// <param name="version">The version of the record.</param>
        /// <param name="attributeDefs">An array of attribute
        /// definitions.</param>
        /// <param name="propagateTags">Possible values include: 'NONE',
        /// 'ONE_TO_TWO', 'TWO_TO_ONE', 'BOTH'</param>
        /// <param name="relationshipCategory">Possible values include:
        /// 'ASSOCIATION', 'AGGREGATION', 'COMPOSITION'</param>
        /// <param name="relationshipLabel">The label of the
        /// relationship.</param>
        public JsonAtlasRelationshipDef(string category = default(string), double? createTime = default(double?), string createdBy = default(string), JsonDateFormat dateFormatter = default(JsonDateFormat), string description = default(string), string guid = default(string), string name = default(string), IDictionary<string, string> options = default(IDictionary<string, string>), string typeVersion = default(string), double? updateTime = default(double?), string updatedBy = default(string), double? version = default(double?), IList<JsonAtlasAttributeDef> attributeDefs = default(IList<JsonAtlasAttributeDef>), JsonAtlasRelationshipEndDef endDef1 = default(JsonAtlasRelationshipEndDef), JsonAtlasRelationshipEndDef endDef2 = default(JsonAtlasRelationshipEndDef), string propagateTags = default(string), string relationshipCategory = default(string), string relationshipLabel = default(string))
            : base(category, createTime, createdBy, dateFormatter, description, guid, name, options, typeVersion, updateTime, updatedBy, version, attributeDefs)
        {
            EndDef1 = endDef1;
            EndDef2 = endDef2;
            PropagateTags = propagateTags;
            RelationshipCategory = relationshipCategory;
            RelationshipLabel = relationshipLabel;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endDef1")]
        public JsonAtlasRelationshipEndDef EndDef1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endDef2")]
        public JsonAtlasRelationshipEndDef EndDef2 { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NONE', 'ONE_TO_TWO',
        /// 'TWO_TO_ONE', 'BOTH'
        /// </summary>
        [JsonProperty(PropertyName = "propagateTags")]
        public string PropagateTags { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'ASSOCIATION', 'AGGREGATION',
        /// 'COMPOSITION'
        /// </summary>
        [JsonProperty(PropertyName = "relationshipCategory")]
        public string RelationshipCategory { get; set; }

        /// <summary>
        /// Gets or sets the label of the relationship.
        /// </summary>
        [JsonProperty(PropertyName = "relationshipLabel")]
        public string RelationshipLabel { get; set; }

    }
}
