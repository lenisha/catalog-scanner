// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataCatalogGen2.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// NumberFormat
    /// </summary>
    /// <remarks>
    /// The number format.
    /// </remarks>
    public partial class JsonNumberFormat
    {
        /// <summary>
        /// Initializes a new instance of the JsonNumberFormat class.
        /// </summary>
        public JsonNumberFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonNumberFormat class.
        /// </summary>
        /// <param name="availableLocales">The number format.</param>
        /// <param name="currency">The currency.</param>
        /// <param name="groupingUsed">Determines if grouping is used.</param>
        /// <param name="maximumFractionDigits">The maximum of fraction
        /// digits.</param>
        /// <param name="maximumIntegerDigits">The maximum of integer
        /// digits.</param>
        /// <param name="minimumFractionDigits">The minimum of fraction
        /// digits.</param>
        /// <param name="minimumIntegerDigits">The minimum of integer
        /// digits.</param>
        /// <param name="parseIntegerOnly">Determines if only integer is
        /// parsed.</param>
        /// <param name="roundingMode">Possible values include: 'UP', 'DOWN',
        /// 'CEILING', 'FLOOR', 'HALF_UP', 'HALF_DOWN', 'HALF_EVEN',
        /// 'UNNECESSARY'</param>
        public JsonNumberFormat(IList<string> availableLocales = default(IList<string>), string currency = default(string), JsonNumberFormat currencyInstance = default(JsonNumberFormat), bool? groupingUsed = default(bool?), JsonNumberFormat instance = default(JsonNumberFormat), JsonNumberFormat integerInstance = default(JsonNumberFormat), int? maximumFractionDigits = default(int?), int? maximumIntegerDigits = default(int?), int? minimumFractionDigits = default(int?), int? minimumIntegerDigits = default(int?), JsonNumberFormat numberInstance = default(JsonNumberFormat), bool? parseIntegerOnly = default(bool?), JsonNumberFormat percentInstance = default(JsonNumberFormat), string roundingMode = default(string))
        {
            AvailableLocales = availableLocales;
            Currency = currency;
            CurrencyInstance = currencyInstance;
            GroupingUsed = groupingUsed;
            Instance = instance;
            IntegerInstance = integerInstance;
            MaximumFractionDigits = maximumFractionDigits;
            MaximumIntegerDigits = maximumIntegerDigits;
            MinimumFractionDigits = minimumFractionDigits;
            MinimumIntegerDigits = minimumIntegerDigits;
            NumberInstance = numberInstance;
            ParseIntegerOnly = parseIntegerOnly;
            PercentInstance = percentInstance;
            RoundingMode = roundingMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the number format.
        /// </summary>
        [JsonProperty(PropertyName = "availableLocales")]
        public IList<string> AvailableLocales { get; set; }

        /// <summary>
        /// Gets or sets the currency.
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currencyInstance")]
        public JsonNumberFormat CurrencyInstance { get; set; }

        /// <summary>
        /// Gets or sets determines if grouping is used.
        /// </summary>
        [JsonProperty(PropertyName = "groupingUsed")]
        public bool? GroupingUsed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "instance")]
        public JsonNumberFormat Instance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "integerInstance")]
        public JsonNumberFormat IntegerInstance { get; set; }

        /// <summary>
        /// Gets or sets the maximum of fraction digits.
        /// </summary>
        [JsonProperty(PropertyName = "maximumFractionDigits")]
        public int? MaximumFractionDigits { get; set; }

        /// <summary>
        /// Gets or sets the maximum of integer digits.
        /// </summary>
        [JsonProperty(PropertyName = "maximumIntegerDigits")]
        public int? MaximumIntegerDigits { get; set; }

        /// <summary>
        /// Gets or sets the minimum of fraction digits.
        /// </summary>
        [JsonProperty(PropertyName = "minimumFractionDigits")]
        public int? MinimumFractionDigits { get; set; }

        /// <summary>
        /// Gets or sets the minimum of integer digits.
        /// </summary>
        [JsonProperty(PropertyName = "minimumIntegerDigits")]
        public int? MinimumIntegerDigits { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "numberInstance")]
        public JsonNumberFormat NumberInstance { get; set; }

        /// <summary>
        /// Gets or sets determines if only integer is parsed.
        /// </summary>
        [JsonProperty(PropertyName = "parseIntegerOnly")]
        public bool? ParseIntegerOnly { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "percentInstance")]
        public JsonNumberFormat PercentInstance { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'UP', 'DOWN', 'CEILING',
        /// 'FLOOR', 'HALF_UP', 'HALF_DOWN', 'HALF_EVEN', 'UNNECESSARY'
        /// </summary>
        [JsonProperty(PropertyName = "roundingMode")]
        public string RoundingMode { get; set; }

    }
}
