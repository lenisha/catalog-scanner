// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataCatalogGen2.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AtlasRelationship
    /// </summary>
    /// <remarks>
    /// Atlas relationship instance.
    /// </remarks>
    public partial class JsonAtlasRelationship : JsonAtlasStruct
    {
        /// <summary>
        /// Initializes a new instance of the JsonAtlasRelationship class.
        /// </summary>
        public JsonAtlasRelationship()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonAtlasRelationship class.
        /// </summary>
        /// <param name="attributes">The attributes of the struct.</param>
        /// <param name="typeName">The name of the type.</param>
        /// <param name="blockedPropagatedClassifications">An array of blocked
        /// propagated classifications.</param>
        /// <param name="createTime">The created time of the record.</param>
        /// <param name="createdBy">The user who created the record.</param>
        /// <param name="guid">The GUID of the relationship.</param>
        /// <param name="homeId">The home ID of the relationship.</param>
        /// <param name="label">The label of the relationship.</param>
        /// <param name="propagateTags">Possible values include: 'NONE',
        /// 'ONE_TO_TWO', 'TWO_TO_ONE', 'BOTH'</param>
        /// <param name="propagatedClassifications">An array of propagated
        /// classifications.</param>
        /// <param name="status">Possible values include: 'ACTIVE',
        /// 'DELETED'</param>
        /// <param name="updateTime">The update time of the record.</param>
        /// <param name="updatedBy">The user who updated the record.</param>
        /// <param name="version">The version of the relationship.</param>
        public JsonAtlasRelationship(IDictionary<string, object> attributes = default(IDictionary<string, object>), string typeName = default(string), IList<JsonAtlasClassification> blockedPropagatedClassifications = default(IList<JsonAtlasClassification>), double? createTime = default(double?), string createdBy = default(string), JsonAtlasObjectId end1 = default(JsonAtlasObjectId), JsonAtlasObjectId end2 = default(JsonAtlasObjectId), string guid = default(string), string homeId = default(string), string label = default(string), string propagateTags = default(string), IList<JsonAtlasClassification> propagatedClassifications = default(IList<JsonAtlasClassification>), string status = default(string), double? updateTime = default(double?), string updatedBy = default(string), double? version = default(double?))
            : base(attributes, typeName)
        {
            BlockedPropagatedClassifications = blockedPropagatedClassifications;
            CreateTime = createTime;
            CreatedBy = createdBy;
            End1 = end1;
            End2 = end2;
            Guid = guid;
            HomeId = homeId;
            Label = label;
            PropagateTags = propagateTags;
            PropagatedClassifications = propagatedClassifications;
            Status = status;
            UpdateTime = updateTime;
            UpdatedBy = updatedBy;
            Version = version;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an array of blocked propagated classifications.
        /// </summary>
        [JsonProperty(PropertyName = "blockedPropagatedClassifications")]
        public IList<JsonAtlasClassification> BlockedPropagatedClassifications { get; set; }

        /// <summary>
        /// Gets or sets the created time of the record.
        /// </summary>
        [JsonProperty(PropertyName = "createTime")]
        public double? CreateTime { get; set; }

        /// <summary>
        /// Gets or sets the user who created the record.
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end1")]
        public JsonAtlasObjectId End1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end2")]
        public JsonAtlasObjectId End2 { get; set; }

        /// <summary>
        /// Gets or sets the GUID of the relationship.
        /// </summary>
        [JsonProperty(PropertyName = "guid")]
        public string Guid { get; set; }

        /// <summary>
        /// Gets or sets the home ID of the relationship.
        /// </summary>
        [JsonProperty(PropertyName = "homeId")]
        public string HomeId { get; set; }

        /// <summary>
        /// Gets or sets the label of the relationship.
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NONE', 'ONE_TO_TWO',
        /// 'TWO_TO_ONE', 'BOTH'
        /// </summary>
        [JsonProperty(PropertyName = "propagateTags")]
        public string PropagateTags { get; set; }

        /// <summary>
        /// Gets or sets an array of propagated classifications.
        /// </summary>
        [JsonProperty(PropertyName = "propagatedClassifications")]
        public IList<JsonAtlasClassification> PropagatedClassifications { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'ACTIVE', 'DELETED'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the update time of the record.
        /// </summary>
        [JsonProperty(PropertyName = "updateTime")]
        public double? UpdateTime { get; set; }

        /// <summary>
        /// Gets or sets the user who updated the record.
        /// </summary>
        [JsonProperty(PropertyName = "updatedBy")]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Gets or sets the version of the relationship.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public double? Version { get; set; }

    }
}
