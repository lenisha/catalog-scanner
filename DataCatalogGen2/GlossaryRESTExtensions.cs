// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataCatalogGen2
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GlossaryREST.
    /// </summary>
    public static partial class GlossaryRESTExtensions
    {
            /// <summary>
            /// Gets all glossaries registered with Atlas.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<JsonAtlasGlossary> GetGlossaries(this IGlossaryREST operations)
            {
                return operations.GetGlossariesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all glossaries registered with Atlas.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasGlossary>> GetGlossariesAsync(this IGlossaryREST operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGlossariesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='atlasGlossary'>
            /// Glossary definition, terms &amp; categories can be anchored to a glossary.
            /// Using the anchor attribute when creating the Term/Category.
            /// </param>
            public static JsonAtlasGlossary CreateGlossary(this IGlossaryREST operations, JsonAtlasGlossary atlasGlossary)
            {
                return operations.CreateGlossaryAsync(atlasGlossary).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='atlasGlossary'>
            /// Glossary definition, terms &amp; categories can be anchored to a glossary.
            /// Using the anchor attribute when creating the Term/Category.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossary> CreateGlossaryAsync(this IGlossaryREST operations, JsonAtlasGlossary atlasGlossary, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGlossaryWithHttpMessagesAsync(atlasGlossary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates glossary category in bulk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryCategory'>
            /// An array of glossary category definitions to be created.
            /// </param>
            public static IList<JsonAtlasGlossaryCategory> CreateGlossaryCategories(this IGlossaryREST operations, IList<JsonAtlasGlossaryCategory> glossaryCategory)
            {
                return operations.CreateGlossaryCategoriesAsync(glossaryCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates glossary category in bulk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryCategory'>
            /// An array of glossary category definitions to be created.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasGlossaryCategory>> CreateGlossaryCategoriesAsync(this IGlossaryREST operations, IList<JsonAtlasGlossaryCategory> glossaryCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGlossaryCategoriesWithHttpMessagesAsync(glossaryCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a glossary category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryCategory'>
            /// The glossary category definition. A category must be anchored to a Glossary
            /// when creating.
            /// Optionally, terms belonging to the category and the hierarchy can also be
            /// defined during creation.
            /// </param>
            public static JsonAtlasGlossaryCategory CreateGlossaryCategory(this IGlossaryREST operations, JsonAtlasGlossaryCategory glossaryCategory)
            {
                return operations.CreateGlossaryCategoryAsync(glossaryCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a glossary category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryCategory'>
            /// The glossary category definition. A category must be anchored to a Glossary
            /// when creating.
            /// Optionally, terms belonging to the category and the hierarchy can also be
            /// defined during creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossaryCategory> CreateGlossaryCategoryAsync(this IGlossaryREST operations, JsonAtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGlossaryCategoryWithHttpMessagesAsync(glossaryCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets specific glossary category by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            public static JsonAtlasGlossaryCategory GetGlossaryCategory(this IGlossaryREST operations, string categoryGuid)
            {
                return operations.GetGlossaryCategoryAsync(categoryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets specific glossary category by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossaryCategory> GetGlossaryCategoryAsync(this IGlossaryREST operations, string categoryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGlossaryCategoryWithHttpMessagesAsync(categoryGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the given glossary category by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            /// <param name='glossaryCategory'>
            /// The glossary category to be updated.
            /// </param>
            public static JsonAtlasGlossaryCategory UpdateGlossaryCategory(this IGlossaryREST operations, string categoryGuid, JsonAtlasGlossaryCategory glossaryCategory)
            {
                return operations.UpdateGlossaryCategoryAsync(categoryGuid, glossaryCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given glossary category by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            /// <param name='glossaryCategory'>
            /// The glossary category to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossaryCategory> UpdateGlossaryCategoryAsync(this IGlossaryREST operations, string categoryGuid, JsonAtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateGlossaryCategoryWithHttpMessagesAsync(categoryGuid, glossaryCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a glossary category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            public static void DeleteGlossaryCategory(this IGlossaryREST operations, string categoryGuid)
            {
                operations.DeleteGlossaryCategoryAsync(categoryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a glossary category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGlossaryCategoryAsync(this IGlossaryREST operations, string categoryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGlossaryCategoryWithHttpMessagesAsync(categoryGuid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the glossary category partially.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            /// <param name='partialUpdates'>
            /// A map containing keys as attribute names and values as corresponding
            /// attribute values for partial update.
            /// </param>
            public static JsonAtlasGlossaryCategory PartialUpdateGlossaryCategory(this IGlossaryREST operations, string categoryGuid, IDictionary<string, string> partialUpdates)
            {
                return operations.PartialUpdateGlossaryCategoryAsync(categoryGuid, partialUpdates).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the glossary category partially.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            /// <param name='partialUpdates'>
            /// A map containing keys as attribute names and values as corresponding
            /// attribute values for partial update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossaryCategory> PartialUpdateGlossaryCategoryAsync(this IGlossaryREST operations, string categoryGuid, IDictionary<string, string> partialUpdates, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PartialUpdateGlossaryCategoryWithHttpMessagesAsync(categoryGuid, partialUpdates, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all related categories (parent and children). Limit, offset, and sort
            /// parameters are currently not being enabled and won't work even they are
            /// passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            public static IDictionary<string, IList<JsonAtlasRelatedCategoryHeader>> GetRelatedCategories(this IGlossaryREST operations, string categoryGuid)
            {
                return operations.GetRelatedCategoriesAsync(categoryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all related categories (parent and children). Limit, offset, and sort
            /// parameters are currently not being enabled and won't work even they are
            /// passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<JsonAtlasRelatedCategoryHeader>>> GetRelatedCategoriesAsync(this IGlossaryREST operations, string categoryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelatedCategoriesWithHttpMessagesAsync(categoryGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all terms associated with the specific category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            public static IList<JsonAtlasRelatedTermHeader> GetCategoryTerms(this IGlossaryREST operations, string categoryGuid)
            {
                return operations.GetCategoryTermsAsync(categoryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all terms associated with the specific category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryGuid'>
            /// The globally unique identifier of the category.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasRelatedTermHeader>> GetCategoryTermsAsync(this IGlossaryREST operations, string categoryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoryTermsWithHttpMessagesAsync(categoryGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a glossary term.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryTerm'>
            /// The glossary term definition. A term must be anchored to a Glossary at the
            /// time of creation.
            /// Optionally it can be categorized as well.
            /// </param>
            public static JsonAtlasGlossaryTerm CreateGlossaryTerm(this IGlossaryREST operations, JsonAtlasGlossaryTerm glossaryTerm)
            {
                return operations.CreateGlossaryTermAsync(glossaryTerm).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a glossary term.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryTerm'>
            /// The glossary term definition. A term must be anchored to a Glossary at the
            /// time of creation.
            /// Optionally it can be categorized as well.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossaryTerm> CreateGlossaryTermAsync(this IGlossaryREST operations, JsonAtlasGlossaryTerm glossaryTerm, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGlossaryTermWithHttpMessagesAsync(glossaryTerm, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific glossary term by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            public static JsonAtlasGlossaryTerm GetGlossaryTerm(this IGlossaryREST operations, string termGuid)
            {
                return operations.GetGlossaryTermAsync(termGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific glossary term by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossaryTerm> GetGlossaryTermAsync(this IGlossaryREST operations, string termGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGlossaryTermWithHttpMessagesAsync(termGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the given glossary term by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='glossaryTerm'>
            /// The glossary term to be updated.
            /// </param>
            public static JsonAtlasGlossaryTerm UpdateGlossaryTerm(this IGlossaryREST operations, string termGuid, JsonAtlasGlossaryTerm glossaryTerm)
            {
                return operations.UpdateGlossaryTermAsync(termGuid, glossaryTerm).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given glossary term by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='glossaryTerm'>
            /// The glossary term to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossaryTerm> UpdateGlossaryTermAsync(this IGlossaryREST operations, string termGuid, JsonAtlasGlossaryTerm glossaryTerm, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateGlossaryTermWithHttpMessagesAsync(termGuid, glossaryTerm, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a glossary term.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            public static void DeleteGlossaryTerm(this IGlossaryREST operations, string termGuid)
            {
                operations.DeleteGlossaryTermAsync(termGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a glossary term.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGlossaryTermAsync(this IGlossaryREST operations, string termGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGlossaryTermWithHttpMessagesAsync(termGuid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the glossary term partially.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='partialUpdates'>
            /// A map containing keys as attribute names and values as corresponding
            /// attribute values to be updated.
            /// </param>
            public static JsonAtlasGlossaryTerm PartialUpdateGlossaryTerm(this IGlossaryREST operations, string termGuid, IDictionary<string, string> partialUpdates)
            {
                return operations.PartialUpdateGlossaryTermAsync(termGuid, partialUpdates).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the glossary term partially.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='partialUpdates'>
            /// A map containing keys as attribute names and values as corresponding
            /// attribute values to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossaryTerm> PartialUpdateGlossaryTermAsync(this IGlossaryREST operations, string termGuid, IDictionary<string, string> partialUpdates, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PartialUpdateGlossaryTermWithHttpMessagesAsync(termGuid, partialUpdates, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates glossary terms in bulk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryTerm'>
            /// An array of glossary term definitions to be created in bulk.
            /// </param>
            public static IList<JsonAtlasGlossaryTerm> CreateGlossaryTerms(this IGlossaryREST operations, IList<JsonAtlasGlossaryTerm> glossaryTerm)
            {
                return operations.CreateGlossaryTermsAsync(glossaryTerm).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates glossary terms in bulk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryTerm'>
            /// An array of glossary term definitions to be created in bulk.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasGlossaryTerm>> CreateGlossaryTermsAsync(this IGlossaryREST operations, IList<JsonAtlasGlossaryTerm> glossaryTerm, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGlossaryTermsWithHttpMessagesAsync(glossaryTerm, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all related objects assigned with the specified term.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            public static IList<JsonAtlasRelatedObjectId> GetEntitiesAssignedWithTerm(this IGlossaryREST operations, string termGuid)
            {
                return operations.GetEntitiesAssignedWithTermAsync(termGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all related objects assigned with the specified term.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasRelatedObjectId>> GetEntitiesAssignedWithTermAsync(this IGlossaryREST operations, string termGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntitiesAssignedWithTermWithHttpMessagesAsync(termGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Assigns the given term to the provided list of related objects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='relatedObjectIds'>
            /// An array of related object IDs to which the term has to be associated.
            /// </param>
            public static void AssignTermToEntities(this IGlossaryREST operations, string termGuid, IList<JsonAtlasRelatedObjectId> relatedObjectIds)
            {
                operations.AssignTermToEntitiesAsync(termGuid, relatedObjectIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns the given term to the provided list of related objects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='relatedObjectIds'>
            /// An array of related object IDs to which the term has to be associated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignTermToEntitiesAsync(this IGlossaryREST operations, string termGuid, IList<JsonAtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignTermToEntitiesWithHttpMessagesAsync(termGuid, relatedObjectIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes the term assignment for the given list of related objects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='relatedObjectIds'>
            /// An array of related object IDs from which the term has to be dissociated.
            /// </param>
            public static void RemoveTermAssignmentFromEntities(this IGlossaryREST operations, string termGuid, IList<JsonAtlasRelatedObjectId> relatedObjectIds)
            {
                operations.RemoveTermAssignmentFromEntitiesAsync(termGuid, relatedObjectIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the term assignment for the given list of related objects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='relatedObjectIds'>
            /// An array of related object IDs from which the term has to be dissociated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveTermAssignmentFromEntitiesAsync(this IGlossaryREST operations, string termGuid, IList<JsonAtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveTermAssignmentFromEntitiesWithHttpMessagesAsync(termGuid, relatedObjectIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all related terms for a specific term by its GUID. Limit, offset, and
            /// sort parameters are currently not being enabled and won't work even they
            /// are passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            public static IDictionary<string, IList<JsonAtlasRelatedTermHeader>> GetRelatedTerms(this IGlossaryREST operations, string termGuid)
            {
                return operations.GetRelatedTermsAsync(termGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all related terms for a specific term by its GUID. Limit, offset, and
            /// sort parameters are currently not being enabled and won't work even they
            /// are passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='termGuid'>
            /// The globally unique identifier for glossary term.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<JsonAtlasRelatedTermHeader>>> GetRelatedTermsAsync(this IGlossaryREST operations, string termGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelatedTermsWithHttpMessagesAsync(termGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific Glossary by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            public static JsonAtlasGlossary GetGlossary(this IGlossaryREST operations, string glossaryGuid)
            {
                return operations.GetGlossaryAsync(glossaryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific Glossary by its GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossary> GetGlossaryAsync(this IGlossaryREST operations, string glossaryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGlossaryWithHttpMessagesAsync(glossaryGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the given glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='updatedGlossary'>
            /// The glossary definition to be updated.
            /// </param>
            public static JsonAtlasGlossary UpdateGlossary(this IGlossaryREST operations, string glossaryGuid, JsonAtlasGlossary updatedGlossary)
            {
                return operations.UpdateGlossaryAsync(glossaryGuid, updatedGlossary).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='updatedGlossary'>
            /// The glossary definition to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossary> UpdateGlossaryAsync(this IGlossaryREST operations, string glossaryGuid, JsonAtlasGlossary updatedGlossary, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateGlossaryWithHttpMessagesAsync(glossaryGuid, updatedGlossary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            public static void DeleteGlossary(this IGlossaryREST operations, string glossaryGuid)
            {
                operations.DeleteGlossaryAsync(glossaryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGlossaryAsync(this IGlossaryREST operations, string glossaryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGlossaryWithHttpMessagesAsync(glossaryGuid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the categories belonging to a specific glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            public static IList<JsonAtlasGlossaryCategory> GetGlossaryCategories(this IGlossaryREST operations, string glossaryGuid)
            {
                return operations.GetGlossaryCategoriesAsync(glossaryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the categories belonging to a specific glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasGlossaryCategory>> GetGlossaryCategoriesAsync(this IGlossaryREST operations, string glossaryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGlossaryCategoriesWithHttpMessagesAsync(glossaryGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the category headers belonging to a specific glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            public static IList<JsonAtlasRelatedCategoryHeader> GetGlossaryCategoriesHeaders(this IGlossaryREST operations, string glossaryGuid)
            {
                return operations.GetGlossaryCategoriesHeadersAsync(glossaryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the category headers belonging to a specific glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasRelatedCategoryHeader>> GetGlossaryCategoriesHeadersAsync(this IGlossaryREST operations, string glossaryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGlossaryCategoriesHeadersWithHttpMessagesAsync(glossaryGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific glossary with detailed information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            public static JsonAtlasGlossaryExtInfo GetDetailedGlossary(this IGlossaryREST operations, string glossaryGuid)
            {
                return operations.GetDetailedGlossaryAsync(glossaryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific glossary with detailed information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossaryExtInfo> GetDetailedGlossaryAsync(this IGlossaryREST operations, string glossaryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailedGlossaryWithHttpMessagesAsync(glossaryGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the glossary partially. Some properties such as qualifiedName are
            /// not allowed to be updated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='partialUpdates'>
            /// A map containing keys as attribute names and values as corresponding
            /// attribute values.
            /// </param>
            public static JsonAtlasGlossary PartialUpdateGlossary(this IGlossaryREST operations, string glossaryGuid, IDictionary<string, string> partialUpdates)
            {
                return operations.PartialUpdateGlossaryAsync(glossaryGuid, partialUpdates).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the glossary partially. Some properties such as qualifiedName are
            /// not allowed to be updated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='partialUpdates'>
            /// A map containing keys as attribute names and values as corresponding
            /// attribute values.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasGlossary> PartialUpdateGlossaryAsync(this IGlossaryREST operations, string glossaryGuid, IDictionary<string, string> partialUpdates, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PartialUpdateGlossaryWithHttpMessagesAsync(glossaryGuid, partialUpdates, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets terms belonging to a specific glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            public static IList<JsonAtlasGlossaryTerm> GetGlossaryTerms(this IGlossaryREST operations, string glossaryGuid)
            {
                return operations.GetGlossaryTermsAsync(glossaryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets terms belonging to a specific glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasGlossaryTerm>> GetGlossaryTermsAsync(this IGlossaryREST operations, string glossaryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGlossaryTermsWithHttpMessagesAsync(glossaryGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets term headers belonging to a specific glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            public static IList<JsonAtlasRelatedTermHeader> GetGlossaryTermHeaders(this IGlossaryREST operations, string glossaryGuid)
            {
                return operations.GetGlossaryTermHeadersAsync(glossaryGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets term headers belonging to a specific glossary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryGuid'>
            /// The globally unique identifier for glossary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasRelatedTermHeader>> GetGlossaryTermHeadersAsync(this IGlossaryREST operations, string glossaryGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGlossaryTermHeadersWithHttpMessagesAsync(glossaryGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets terms by glossary name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryName'>
            /// The name of the glossary.
            /// </param>
            public static IList<JsonAtlasGlossaryTerm> GetTermsByGlossaryName(this IGlossaryREST operations, string glossaryName)
            {
                return operations.GetTermsByGlossaryNameAsync(glossaryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets terms by glossary name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='glossaryName'>
            /// The name of the glossary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasGlossaryTerm>> GetTermsByGlossaryNameAsync(this IGlossaryREST operations, string glossaryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTermsByGlossaryNameWithHttpMessagesAsync(glossaryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
