// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataCatalogGen2.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AtlasEntityHeader
    /// </summary>
    /// <remarks>
    /// An instance of an entity - like hive_table, hive_database.
    /// </remarks>
    public partial class JsonAtlasEntityHeader : JsonAtlasStruct
    {
        /// <summary>
        /// Initializes a new instance of the JsonAtlasEntityHeader class.
        /// </summary>
        public JsonAtlasEntityHeader()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonAtlasEntityHeader class.
        /// </summary>
        /// <param name="attributes">The attributes of the struct.</param>
        /// <param name="typeName">The name of the type.</param>
        /// <param name="classificationNames">An array of classification
        /// names.</param>
        /// <param name="classifications">An array of classifications.</param>
        /// <param name="displayText">The display text.</param>
        /// <param name="guid">The GUID of the record.</param>
        /// <param name="meaningNames">An array of meanings.</param>
        /// <param name="meanings">An array of term assignment headers.</param>
        /// <param name="status">Possible values include: 'ACTIVE',
        /// 'DELETED'</param>
        public JsonAtlasEntityHeader(IDictionary<string, object> attributes = default(IDictionary<string, object>), string typeName = default(string), IList<string> classificationNames = default(IList<string>), IList<JsonAtlasClassification> classifications = default(IList<JsonAtlasClassification>), string displayText = default(string), string guid = default(string), IList<string> meaningNames = default(IList<string>), IList<JsonAtlasTermAssignmentHeader> meanings = default(IList<JsonAtlasTermAssignmentHeader>), string status = default(string))
            : base(attributes, typeName)
        {
            ClassificationNames = classificationNames;
            Classifications = classifications;
            DisplayText = displayText;
            Guid = guid;
            MeaningNames = meaningNames;
            Meanings = meanings;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an array of classification names.
        /// </summary>
        [JsonProperty(PropertyName = "classificationNames")]
        public IList<string> ClassificationNames { get; set; }

        /// <summary>
        /// Gets or sets an array of classifications.
        /// </summary>
        [JsonProperty(PropertyName = "classifications")]
        public IList<JsonAtlasClassification> Classifications { get; set; }

        /// <summary>
        /// Gets or sets the display text.
        /// </summary>
        [JsonProperty(PropertyName = "displayText")]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or sets the GUID of the record.
        /// </summary>
        [JsonProperty(PropertyName = "guid")]
        public string Guid { get; set; }

        /// <summary>
        /// Gets or sets an array of meanings.
        /// </summary>
        [JsonProperty(PropertyName = "meaningNames")]
        public IList<string> MeaningNames { get; set; }

        /// <summary>
        /// Gets or sets an array of term assignment headers.
        /// </summary>
        [JsonProperty(PropertyName = "meanings")]
        public IList<JsonAtlasTermAssignmentHeader> Meanings { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'ACTIVE', 'DELETED'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

    }
}
