// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataCatalogGen2
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TypesREST.
    /// </summary>
    public static partial class TypesRESTExtensions
    {
            /// <summary>
            /// Gets the classification definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the classification.
            /// </param>
            public static JsonAtlasClassificationDef GetClassificationDefByGuid(this ITypesREST operations, string guid)
            {
                return operations.GetClassificationDefByGuidAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the classification definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the classification.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasClassificationDef> GetClassificationDefByGuidAsync(this ITypesREST operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClassificationDefByGuidWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the classification definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the classification.
            /// </param>
            public static JsonAtlasClassificationDef GetClassificationDefByName(this ITypesREST operations, string name)
            {
                return operations.GetClassificationDefByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the classification definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the classification.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasClassificationDef> GetClassificationDefByNameAsync(this ITypesREST operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClassificationDefByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Entity definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the entity.
            /// </param>
            public static JsonAtlasEntityDef GetEntityDefByGuid(this ITypesREST operations, string guid)
            {
                return operations.GetEntityDefByGuidAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Entity definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasEntityDef> GetEntityDefByGuidAsync(this ITypesREST operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntityDefByGuidWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the entity definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the entity.
            /// </param>
            public static JsonAtlasEntityDef GetEntityDefByName(this ITypesREST operations, string name)
            {
                return operations.GetEntityDefByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the entity definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasEntityDef> GetEntityDefByNameAsync(this ITypesREST operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntityDefByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the enum definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the enum.
            /// </param>
            public static JsonAtlasEnumDef GetEnumDefByGuid(this ITypesREST operations, string guid)
            {
                return operations.GetEnumDefByGuidAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the enum definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the enum.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasEnumDef> GetEnumDefByGuidAsync(this ITypesREST operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnumDefByGuidWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the enum definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the enum.
            /// </param>
            public static JsonAtlasEnumDef GetEnumDefByName(this ITypesREST operations, string name)
            {
                return operations.GetEnumDefByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the enum definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the enum.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasEnumDef> GetEnumDefByNameAsync(this ITypesREST operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnumDefByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the relationship definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the relationship.
            /// </param>
            public static JsonAtlasRelationshipDef GetRelationshipDefByGuid(this ITypesREST operations, string guid)
            {
                return operations.GetRelationshipDefByGuidAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the relationship definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the relationship.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasRelationshipDef> GetRelationshipDefByGuidAsync(this ITypesREST operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelationshipDefByGuidWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the relationship definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the relationship.
            /// </param>
            public static JsonAtlasRelationshipDef GetRelationshipDefByName(this ITypesREST operations, string name)
            {
                return operations.GetRelationshipDefByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the relationship definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the relationship.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasRelationshipDef> GetRelationshipDefByNameAsync(this ITypesREST operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelationshipDefByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the struct definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the struct.
            /// </param>
            public static JsonAtlasStructDef GetStructDefByGuid(this ITypesREST operations, string guid)
            {
                return operations.GetStructDefByGuidAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the struct definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the struct.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasStructDef> GetStructDefByGuidAsync(this ITypesREST operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStructDefByGuidWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the struct definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the struct.
            /// </param>
            public static JsonAtlasStructDef GetStructDefByName(this ITypesREST operations, string name)
            {
                return operations.GetStructDefByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the struct definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the struct.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasStructDef> GetStructDefByNameAsync(this ITypesREST operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStructDefByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the type definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the type.
            /// </param>
            public static JsonAtlasBaseTypeDef GetTypeDefByGuid(this ITypesREST operations, string guid)
            {
                return operations.GetTypeDefByGuidAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the type definition for the given GUID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The globally unique identifier of the type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasBaseTypeDef> GetTypeDefByGuidAsync(this ITypesREST operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTypeDefByGuidWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the type definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the type.
            /// </param>
            public static JsonAtlasBaseTypeDef GetTypeDefByName(this ITypesREST operations, string name)
            {
                return operations.GetTypeDefByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the type definition by its name (unique).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasBaseTypeDef> GetTypeDefByNameAsync(this ITypesREST operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTypeDefByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all type definitions in Atlas in bulk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static JsonAtlasTypesDef GetAllTypeDefs(this ITypesREST operations)
            {
                return operations.GetAllTypeDefsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all type definitions in Atlas in bulk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasTypesDef> GetAllTypeDefsAsync(this ITypesREST operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTypeDefsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates all atlas type definitions in bulk, only new definitions will be
            /// created.
            /// Any changes to the existing definitions will be discarded.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='typesDef'>
            /// A composite wrapper object with corresponding lists of the type definition.
            /// </param>
            public static JsonAtlasTypesDef CreateAtlasTypeDefs(this ITypesREST operations, JsonAtlasTypesDef typesDef)
            {
                return operations.CreateAtlasTypeDefsAsync(typesDef).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates all atlas type definitions in bulk, only new definitions will be
            /// created.
            /// Any changes to the existing definitions will be discarded.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='typesDef'>
            /// A composite wrapper object with corresponding lists of the type definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasTypesDef> CreateAtlasTypeDefsAsync(this ITypesREST operations, JsonAtlasTypesDef typesDef, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAtlasTypeDefsWithHttpMessagesAsync(typesDef, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates all types in bulk, changes detected in the type definitions would
            /// be persisted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='typesDef'>
            /// A composite object that captures all type definition changes.
            /// </param>
            public static JsonAtlasTypesDef UpdateAtlasTypeDefs(this ITypesREST operations, JsonAtlasTypesDef typesDef)
            {
                return operations.UpdateAtlasTypeDefsAsync(typesDef).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates all types in bulk, changes detected in the type definitions would
            /// be persisted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='typesDef'>
            /// A composite object that captures all type definition changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonAtlasTypesDef> UpdateAtlasTypeDefsAsync(this ITypesREST operations, JsonAtlasTypesDef typesDef, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAtlasTypeDefsWithHttpMessagesAsync(typesDef, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes API for all types in bulk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='typesDef'>
            /// A composite object that captures all types to be deleted
            /// </param>
            public static void DeleteAtlasTypeDefs(this ITypesREST operations, JsonAtlasTypesDef typesDef)
            {
                operations.DeleteAtlasTypeDefsAsync(typesDef).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes API for all types in bulk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='typesDef'>
            /// A composite object that captures all types to be deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAtlasTypeDefsAsync(this ITypesREST operations, JsonAtlasTypesDef typesDef, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAtlasTypeDefsWithHttpMessagesAsync(typesDef, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all type definitions returned as a list of minimal information
            /// header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<JsonAtlasTypeDefHeader> GetTypeDefHeaders(this ITypesREST operations)
            {
                return operations.GetTypeDefHeadersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all type definitions returned as a list of minimal information
            /// header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JsonAtlasTypeDefHeader>> GetTypeDefHeadersAsync(this ITypesREST operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTypeDefHeadersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
