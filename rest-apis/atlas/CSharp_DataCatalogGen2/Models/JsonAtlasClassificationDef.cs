// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DataCatalogGen2.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AtlasClassificationDef
    /// </summary>
    /// <remarks>
    /// class that captures details of a classification-type.
    /// </remarks>
    public partial class JsonAtlasClassificationDef : JsonAtlasStructDef
    {
        /// <summary>
        /// Initializes a new instance of the JsonAtlasClassificationDef class.
        /// </summary>
        public JsonAtlasClassificationDef()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonAtlasClassificationDef class.
        /// </summary>
        /// <param name="category">Possible values include: 'PRIMITIVE',
        /// 'OBJECT_ID_TYPE', 'ENUM', 'STRUCT', 'CLASSIFICATION', 'ENTITY',
        /// 'ARRAY', 'MAP', 'RELATIONSHIP'</param>
        /// <param name="createTime">The created time of the record.</param>
        /// <param name="createdBy">The user who created the record.</param>
        /// <param name="description">The description of the type
        /// definition.</param>
        /// <param name="guid">The GUID of the type definition.</param>
        /// <param name="name">The name of the type definition.</param>
        /// <param name="options">The options for the type definition.</param>
        /// <param name="typeVersion">The version of the type.</param>
        /// <param name="updateTime">The update time of the record.</param>
        /// <param name="updatedBy">The user who updated the record.</param>
        /// <param name="version">The version of the record.</param>
        /// <param name="attributeDefs">An array of attribute
        /// definitions.</param>
        /// <param name="entityTypes">Specifying a list of entityType names in
        /// the classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &lt;ul&gt;
        /// &lt;li&gt;Any subtypes of the entity types inherit the
        /// restriction&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes inherit the parents
        /// entityTypes restrictions&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes can further restrict the
        /// parents entityTypes restrictions by specifying a subset of the
        /// entityTypes&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are no parent
        /// restrictions means there are no restrictions&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are parent
        /// restrictions means that the subtype picks up the parents
        /// restrictions&lt;/li&gt;
        /// &lt;li&gt;If a list of entityTypes are supplied, where one inherits
        /// from another, this will be rejected. This should encourage cleaner
        /// classificationsDefs&lt;/li&gt;
        /// &lt;/ul&gt;</param>
        /// <param name="subTypes">An array of sub types.</param>
        /// <param name="superTypes">An array of super types.</param>
        public JsonAtlasClassificationDef(string category = default(string), double? createTime = default(double?), string createdBy = default(string), JsonDateFormat dateFormatter = default(JsonDateFormat), string description = default(string), string guid = default(string), string name = default(string), IDictionary<string, string> options = default(IDictionary<string, string>), string typeVersion = default(string), double? updateTime = default(double?), string updatedBy = default(string), double? version = default(double?), IList<JsonAtlasAttributeDef> attributeDefs = default(IList<JsonAtlasAttributeDef>), IList<string> entityTypes = default(IList<string>), IList<string> subTypes = default(IList<string>), IList<string> superTypes = default(IList<string>))
            : base(category, createTime, createdBy, dateFormatter, description, guid, name, options, typeVersion, updateTime, updatedBy, version, attributeDefs)
        {
            EntityTypes = entityTypes;
            SubTypes = subTypes;
            SuperTypes = superTypes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifying a list of entityType names in the
        /// classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &amp;lt;ul&amp;gt;
        /// &amp;lt;li&amp;gt;Any subtypes of the entity types inherit the
        /// restriction&amp;lt;/li&amp;gt;
        /// &amp;lt;li&amp;gt;Any classificationDef subtypes inherit the
        /// parents entityTypes restrictions&amp;lt;/li&amp;gt;
        /// &amp;lt;li&amp;gt;Any classificationDef subtypes can further
        /// restrict the parents entityTypes restrictions by specifying a
        /// subset of the entityTypes&amp;lt;/li&amp;gt;
        /// &amp;lt;li&amp;gt;An empty entityTypes list when there are no
        /// parent restrictions means there are no
        /// restrictions&amp;lt;/li&amp;gt;
        /// &amp;lt;li&amp;gt;An empty entityTypes list when there are parent
        /// restrictions means that the subtype picks up the parents
        /// restrictions&amp;lt;/li&amp;gt;
        /// &amp;lt;li&amp;gt;If a list of entityTypes are supplied, where one
        /// inherits from another, this will be rejected. This should encourage
        /// cleaner classificationsDefs&amp;lt;/li&amp;gt;
        /// &amp;lt;/ul&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "entityTypes")]
        public IList<string> EntityTypes { get; set; }

        /// <summary>
        /// Gets or sets an array of sub types.
        /// </summary>
        [JsonProperty(PropertyName = "subTypes")]
        public IList<string> SubTypes { get; set; }

        /// <summary>
        /// Gets or sets an array of super types.
        /// </summary>
        [JsonProperty(PropertyName = "superTypes")]
        public IList<string> SuperTypes { get; set; }

    }
}
