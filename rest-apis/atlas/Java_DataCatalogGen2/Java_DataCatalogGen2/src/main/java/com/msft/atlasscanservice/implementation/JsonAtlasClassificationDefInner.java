/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice.implementation;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AtlasClassificationDef.
 * class that captures details of a classification-type.
 */
public class JsonAtlasClassificationDefInner extends JsonAtlasStructDefInner {
    /**
     * Specifying a list of entityType names in the classificationDef, ensures
     * that classifications can
     * only be applied to those entityTypes.
     * &lt;ul&gt;
     * &lt;li&gt;Any subtypes of the entity types inherit the
     * restriction&lt;/li&gt;
     * &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes
     * restrictions&lt;/li&gt;
     * &lt;li&gt;Any classificationDef subtypes can further restrict the
     * parents entityTypes restrictions by specifying a subset of the
     * entityTypes&lt;/li&gt;
     * &lt;li&gt;An empty entityTypes list when there are no parent
     * restrictions means there are no restrictions&lt;/li&gt;
     * &lt;li&gt;An empty entityTypes list when there are parent restrictions
     * means that the subtype picks up the parents restrictions&lt;/li&gt;
     * &lt;li&gt;If a list of entityTypes are supplied, where one inherits from
     * another, this will be rejected. This should encourage cleaner
     * classificationsDefs&lt;/li&gt;
     * &lt;/ul&gt;.
     */
    @JsonProperty(value = "entityTypes")
    private List<String> entityTypes;

    /**
     * An array of sub types.
     */
    @JsonProperty(value = "subTypes")
    private List<String> subTypes;

    /**
     * An array of super types.
     */
    @JsonProperty(value = "superTypes")
    private List<String> superTypes;

    /**
     * Get specifying a list of entityType names in the classificationDef, ensures that classifications can
     only be applied to those entityTypes.
     &lt;ul&gt;
     &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
     &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
     &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
     &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
     &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
     &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
     &lt;/ul&gt;.
     *
     * @return the entityTypes value
     */
    public List<String> entityTypes() {
        return this.entityTypes;
    }

    /**
     * Set specifying a list of entityType names in the classificationDef, ensures that classifications can
     only be applied to those entityTypes.
     &lt;ul&gt;
     &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
     &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
     &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
     &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
     &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
     &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
     &lt;/ul&gt;.
     *
     * @param entityTypes the entityTypes value to set
     * @return the JsonAtlasClassificationDefInner object itself.
     */
    public JsonAtlasClassificationDefInner withEntityTypes(List<String> entityTypes) {
        this.entityTypes = entityTypes;
        return this;
    }

    /**
     * Get an array of sub types.
     *
     * @return the subTypes value
     */
    public List<String> subTypes() {
        return this.subTypes;
    }

    /**
     * Set an array of sub types.
     *
     * @param subTypes the subTypes value to set
     * @return the JsonAtlasClassificationDefInner object itself.
     */
    public JsonAtlasClassificationDefInner withSubTypes(List<String> subTypes) {
        this.subTypes = subTypes;
        return this;
    }

    /**
     * Get an array of super types.
     *
     * @return the superTypes value
     */
    public List<String> superTypes() {
        return this.superTypes;
    }

    /**
     * Set an array of super types.
     *
     * @param superTypes the superTypes value to set
     * @return the JsonAtlasClassificationDefInner object itself.
     */
    public JsonAtlasClassificationDefInner withSuperTypes(List<String> superTypes) {
        this.superTypes = superTypes;
        return this;
    }

}
