/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import com.msft.atlasscanservice.JsonSearchParameters;
import com.msft.atlasscanservice.JsonSearchRequest;
import com.msft.atlasscanservice.JsonSuggestRequest;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import rx.Observable;
import rx.functions.Func1;

/**
 * An instance of this class provides access to all the operations defined
 * in DiscoveryRESTs.
 */
public class DiscoveryRESTsInner {
    /** The Retrofit service to perform REST calls. */
    private DiscoveryRESTsService service;
    /** The service client containing this operation class. */
    private DataCatalogClientImpl client;

    /**
     * Initializes an instance of DiscoveryRESTsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DiscoveryRESTsInner(Retrofit retrofit, DataCatalogClientImpl client) {
        this.service = retrofit.create(DiscoveryRESTsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DiscoveryRESTs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DiscoveryRESTsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.DiscoveryRESTs searchUsingBasic" })
        @GET("v2/search/basic")
        Observable<Response<ResponseBody>> searchUsingBasic(@Query("classification") String classification, @Query("excludeDeletedEntities") Boolean excludeDeletedEntities, @Query("limit") Integer limit, @Query("offset") Integer offset, @Query("query") String query, @Query("typeName") String typeName, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.DiscoveryRESTs searchWithParameters" })
        @POST("v2/search/basic")
        Observable<Response<ResponseBody>> searchWithParameters(@Body JsonSearchParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.DiscoveryRESTs searchUsingFullText" })
        @GET("v2/search/fulltext")
        Observable<Response<ResponseBody>> searchUsingFullText(@Query("excludeDeletedEntities") Boolean excludeDeletedEntities, @Query("limit") Integer limit, @Query("offset") Integer offset, @Query("query") String query, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.DiscoveryRESTs searchAdvanced" })
        @POST("v2/search/advanced")
        Observable<Response<ResponseBody>> searchAdvanced(@Body JsonSearchRequest searchRequest, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.DiscoveryRESTs suggest" })
        @POST("v2/search/suggest")
        Observable<Response<ResponseBody>> suggest(@Body JsonSuggestRequest suggestRequest, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.DiscoveryRESTs autoComplete" })
        @GET("v2/search/autocomplete")
        Observable<Response<ResponseBody>> autoComplete(@Query("keyword") String keyword, @Query("limit") Integer limit, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets data for the specified basic query.
     *
     * @param typeName Limits the result to only entities of specified type or its sub-types.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JsonAtlasSearchResultInner object if successful.
     */
    public JsonAtlasSearchResultInner searchUsingBasic(String typeName) {
        return searchUsingBasicWithServiceResponseAsync(typeName).toBlocking().single().body();
    }

    /**
     * Gets data for the specified basic query.
     *
     * @param typeName Limits the result to only entities of specified type or its sub-types.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JsonAtlasSearchResultInner> searchUsingBasicAsync(String typeName, final ServiceCallback<JsonAtlasSearchResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(searchUsingBasicWithServiceResponseAsync(typeName), serviceCallback);
    }

    /**
     * Gets data for the specified basic query.
     *
     * @param typeName Limits the result to only entities of specified type or its sub-types.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasSearchResultInner object
     */
    public Observable<JsonAtlasSearchResultInner> searchUsingBasicAsync(String typeName) {
        return searchUsingBasicWithServiceResponseAsync(typeName).map(new Func1<ServiceResponse<JsonAtlasSearchResultInner>, JsonAtlasSearchResultInner>() {
            @Override
            public JsonAtlasSearchResultInner call(ServiceResponse<JsonAtlasSearchResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets data for the specified basic query.
     *
     * @param typeName Limits the result to only entities of specified type or its sub-types.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasSearchResultInner object
     */
    public Observable<ServiceResponse<JsonAtlasSearchResultInner>> searchUsingBasicWithServiceResponseAsync(String typeName) {
        if (typeName == null) {
            throw new IllegalArgumentException("Parameter typeName is required and cannot be null.");
        }
        return service.searchUsingBasic(this.client.classification(), this.client.excludeDeletedEntities(), this.client.limit(), this.client.offset(), this.client.query(), typeName, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JsonAtlasSearchResultInner>>>() {
                @Override
                public Observable<ServiceResponse<JsonAtlasSearchResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JsonAtlasSearchResultInner> clientResponse = searchUsingBasicDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JsonAtlasSearchResultInner> searchUsingBasicDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JsonAtlasSearchResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JsonAtlasSearchResultInner>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets attribute based search result for entities satisfying the search parameters.
     *
     * @param parameters The search parameter object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JsonAtlasSearchResultInner object if successful.
     */
    public JsonAtlasSearchResultInner searchWithParameters(JsonSearchParameters parameters) {
        return searchWithParametersWithServiceResponseAsync(parameters).toBlocking().single().body();
    }

    /**
     * Gets attribute based search result for entities satisfying the search parameters.
     *
     * @param parameters The search parameter object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JsonAtlasSearchResultInner> searchWithParametersAsync(JsonSearchParameters parameters, final ServiceCallback<JsonAtlasSearchResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithParametersWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * Gets attribute based search result for entities satisfying the search parameters.
     *
     * @param parameters The search parameter object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasSearchResultInner object
     */
    public Observable<JsonAtlasSearchResultInner> searchWithParametersAsync(JsonSearchParameters parameters) {
        return searchWithParametersWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<JsonAtlasSearchResultInner>, JsonAtlasSearchResultInner>() {
            @Override
            public JsonAtlasSearchResultInner call(ServiceResponse<JsonAtlasSearchResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets attribute based search result for entities satisfying the search parameters.
     *
     * @param parameters The search parameter object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasSearchResultInner object
     */
    public Observable<ServiceResponse<JsonAtlasSearchResultInner>> searchWithParametersWithServiceResponseAsync(JsonSearchParameters parameters) {
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.searchWithParameters(parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JsonAtlasSearchResultInner>>>() {
                @Override
                public Observable<ServiceResponse<JsonAtlasSearchResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JsonAtlasSearchResultInner> clientResponse = searchWithParametersDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JsonAtlasSearchResultInner> searchWithParametersDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JsonAtlasSearchResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JsonAtlasSearchResultInner>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets data for the specified fulltext query.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JsonAtlasSearchResultInner object if successful.
     */
    public JsonAtlasSearchResultInner searchUsingFullText() {
        return searchUsingFullTextWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Gets data for the specified fulltext query.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JsonAtlasSearchResultInner> searchUsingFullTextAsync(final ServiceCallback<JsonAtlasSearchResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(searchUsingFullTextWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets data for the specified fulltext query.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasSearchResultInner object
     */
    public Observable<JsonAtlasSearchResultInner> searchUsingFullTextAsync() {
        return searchUsingFullTextWithServiceResponseAsync().map(new Func1<ServiceResponse<JsonAtlasSearchResultInner>, JsonAtlasSearchResultInner>() {
            @Override
            public JsonAtlasSearchResultInner call(ServiceResponse<JsonAtlasSearchResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets data for the specified fulltext query.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasSearchResultInner object
     */
    public Observable<ServiceResponse<JsonAtlasSearchResultInner>> searchUsingFullTextWithServiceResponseAsync() {
        return service.searchUsingFullText(this.client.excludeDeletedEntities(), this.client.limit(), this.client.offset(), this.client.query(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JsonAtlasSearchResultInner>>>() {
                @Override
                public Observable<ServiceResponse<JsonAtlasSearchResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JsonAtlasSearchResultInner> clientResponse = searchUsingFullTextDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JsonAtlasSearchResultInner> searchUsingFullTextDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return this.client.restClient().responseBuilderFactory().<JsonAtlasSearchResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JsonAtlasSearchResultInner>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets data using advanced search by query string.
     *
     * @param searchRequest An object specifying the search criteria.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JsonAdvancedResultInner object if successful.
     */
    public JsonAdvancedResultInner searchAdvanced(JsonSearchRequest searchRequest) {
        return searchAdvancedWithServiceResponseAsync(searchRequest).toBlocking().single().body();
    }

    /**
     * Gets data using advanced search by query string.
     *
     * @param searchRequest An object specifying the search criteria.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JsonAdvancedResultInner> searchAdvancedAsync(JsonSearchRequest searchRequest, final ServiceCallback<JsonAdvancedResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(searchAdvancedWithServiceResponseAsync(searchRequest), serviceCallback);
    }

    /**
     * Gets data using advanced search by query string.
     *
     * @param searchRequest An object specifying the search criteria.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAdvancedResultInner object
     */
    public Observable<JsonAdvancedResultInner> searchAdvancedAsync(JsonSearchRequest searchRequest) {
        return searchAdvancedWithServiceResponseAsync(searchRequest).map(new Func1<ServiceResponse<JsonAdvancedResultInner>, JsonAdvancedResultInner>() {
            @Override
            public JsonAdvancedResultInner call(ServiceResponse<JsonAdvancedResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets data using advanced search by query string.
     *
     * @param searchRequest An object specifying the search criteria.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAdvancedResultInner object
     */
    public Observable<ServiceResponse<JsonAdvancedResultInner>> searchAdvancedWithServiceResponseAsync(JsonSearchRequest searchRequest) {
        if (searchRequest == null) {
            throw new IllegalArgumentException("Parameter searchRequest is required and cannot be null.");
        }
        Validator.validate(searchRequest);
        return service.searchAdvanced(searchRequest, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JsonAdvancedResultInner>>>() {
                @Override
                public Observable<ServiceResponse<JsonAdvancedResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JsonAdvancedResultInner> clientResponse = searchAdvancedDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JsonAdvancedResultInner> searchAdvancedDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JsonAdvancedResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JsonAdvancedResultInner>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets search suggestions by query string.
     *
     * @param suggestRequest An object specifying the suggest criteria.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JsonSuggestResultInner object if successful.
     */
    public JsonSuggestResultInner suggest(JsonSuggestRequest suggestRequest) {
        return suggestWithServiceResponseAsync(suggestRequest).toBlocking().single().body();
    }

    /**
     * Gets search suggestions by query string.
     *
     * @param suggestRequest An object specifying the suggest criteria.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JsonSuggestResultInner> suggestAsync(JsonSuggestRequest suggestRequest, final ServiceCallback<JsonSuggestResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(suggestWithServiceResponseAsync(suggestRequest), serviceCallback);
    }

    /**
     * Gets search suggestions by query string.
     *
     * @param suggestRequest An object specifying the suggest criteria.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonSuggestResultInner object
     */
    public Observable<JsonSuggestResultInner> suggestAsync(JsonSuggestRequest suggestRequest) {
        return suggestWithServiceResponseAsync(suggestRequest).map(new Func1<ServiceResponse<JsonSuggestResultInner>, JsonSuggestResultInner>() {
            @Override
            public JsonSuggestResultInner call(ServiceResponse<JsonSuggestResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets search suggestions by query string.
     *
     * @param suggestRequest An object specifying the suggest criteria.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonSuggestResultInner object
     */
    public Observable<ServiceResponse<JsonSuggestResultInner>> suggestWithServiceResponseAsync(JsonSuggestRequest suggestRequest) {
        if (suggestRequest == null) {
            throw new IllegalArgumentException("Parameter suggestRequest is required and cannot be null.");
        }
        Validator.validate(suggestRequest);
        return service.suggest(suggestRequest, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JsonSuggestResultInner>>>() {
                @Override
                public Observable<ServiceResponse<JsonSuggestResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JsonSuggestResultInner> clientResponse = suggestDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JsonSuggestResultInner> suggestDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JsonSuggestResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JsonSuggestResultInner>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets auto complete options.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JsonSuggestResultInner object if successful.
     */
    public JsonSuggestResultInner autoComplete() {
        return autoCompleteWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Gets auto complete options.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JsonSuggestResultInner> autoCompleteAsync(final ServiceCallback<JsonSuggestResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(autoCompleteWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets auto complete options.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonSuggestResultInner object
     */
    public Observable<JsonSuggestResultInner> autoCompleteAsync() {
        return autoCompleteWithServiceResponseAsync().map(new Func1<ServiceResponse<JsonSuggestResultInner>, JsonSuggestResultInner>() {
            @Override
            public JsonSuggestResultInner call(ServiceResponse<JsonSuggestResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets auto complete options.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonSuggestResultInner object
     */
    public Observable<ServiceResponse<JsonSuggestResultInner>> autoCompleteWithServiceResponseAsync() {
        if (this.client.keyword() == null) {
            throw new IllegalArgumentException("Parameter this.client.keyword() is required and cannot be null.");
        }
        return service.autoComplete(this.client.keyword(), this.client.limit(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JsonSuggestResultInner>>>() {
                @Override
                public Observable<ServiceResponse<JsonSuggestResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JsonSuggestResultInner> clientResponse = autoCompleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JsonSuggestResultInner> autoCompleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JsonSuggestResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JsonSuggestResultInner>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
