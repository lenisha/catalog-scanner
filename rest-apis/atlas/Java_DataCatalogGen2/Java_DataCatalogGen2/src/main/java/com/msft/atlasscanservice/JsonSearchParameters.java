/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SearchParameters.
 * The parameters used for search.
 */
public class JsonSearchParameters {
    /**
     * Attribute values included in the results.
     */
    @JsonProperty(value = "attributes")
    private List<String> attributes;

    /**
     * The classification to search.
     */
    @JsonProperty(value = "classification")
    private String classification;

    /**
     * The entityFilters property.
     */
    @JsonProperty(value = "entityFilters")
    private JsonFilterCriteria entityFilters;

    /**
     * Determines if exclude deleted entities.
     */
    @JsonProperty(value = "excludeDeletedEntities")
    private Boolean excludeDeletedEntities;

    /**
     * Determines if include classification attributes.
     */
    @JsonProperty(value = "includeClassificationAttributes")
    private Boolean includeClassificationAttributes;

    /**
     * Determines if include sub classifications.
     */
    @JsonProperty(value = "includeSubClassifications")
    private Boolean includeSubClassifications;

    /**
     * Determines if include sub types.
     */
    @JsonProperty(value = "includeSubTypes")
    private Boolean includeSubTypes;

    /**
     * The limit of the search result.
     */
    @JsonProperty(value = "limit")
    private Integer limit;

    /**
     * The offset of the search.
     */
    @JsonProperty(value = "offset")
    private Integer offset;

    /**
     * The search query.
     */
    @JsonProperty(value = "query")
    private String query;

    /**
     * The tagFilters property.
     */
    @JsonProperty(value = "tagFilters")
    private JsonFilterCriteria tagFilters;

    /**
     * The name of the term for search.
     */
    @JsonProperty(value = "termName")
    private String termName;

    /**
     * The name of the type for search.
     */
    @JsonProperty(value = "typeName")
    private String typeName;

    /**
     * Get attribute values included in the results.
     *
     * @return the attributes value
     */
    public List<String> attributes() {
        return this.attributes;
    }

    /**
     * Set attribute values included in the results.
     *
     * @param attributes the attributes value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withAttributes(List<String> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the classification to search.
     *
     * @return the classification value
     */
    public String classification() {
        return this.classification;
    }

    /**
     * Set the classification to search.
     *
     * @param classification the classification value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withClassification(String classification) {
        this.classification = classification;
        return this;
    }

    /**
     * Get the entityFilters value.
     *
     * @return the entityFilters value
     */
    public JsonFilterCriteria entityFilters() {
        return this.entityFilters;
    }

    /**
     * Set the entityFilters value.
     *
     * @param entityFilters the entityFilters value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withEntityFilters(JsonFilterCriteria entityFilters) {
        this.entityFilters = entityFilters;
        return this;
    }

    /**
     * Get determines if exclude deleted entities.
     *
     * @return the excludeDeletedEntities value
     */
    public Boolean excludeDeletedEntities() {
        return this.excludeDeletedEntities;
    }

    /**
     * Set determines if exclude deleted entities.
     *
     * @param excludeDeletedEntities the excludeDeletedEntities value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withExcludeDeletedEntities(Boolean excludeDeletedEntities) {
        this.excludeDeletedEntities = excludeDeletedEntities;
        return this;
    }

    /**
     * Get determines if include classification attributes.
     *
     * @return the includeClassificationAttributes value
     */
    public Boolean includeClassificationAttributes() {
        return this.includeClassificationAttributes;
    }

    /**
     * Set determines if include classification attributes.
     *
     * @param includeClassificationAttributes the includeClassificationAttributes value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withIncludeClassificationAttributes(Boolean includeClassificationAttributes) {
        this.includeClassificationAttributes = includeClassificationAttributes;
        return this;
    }

    /**
     * Get determines if include sub classifications.
     *
     * @return the includeSubClassifications value
     */
    public Boolean includeSubClassifications() {
        return this.includeSubClassifications;
    }

    /**
     * Set determines if include sub classifications.
     *
     * @param includeSubClassifications the includeSubClassifications value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withIncludeSubClassifications(Boolean includeSubClassifications) {
        this.includeSubClassifications = includeSubClassifications;
        return this;
    }

    /**
     * Get determines if include sub types.
     *
     * @return the includeSubTypes value
     */
    public Boolean includeSubTypes() {
        return this.includeSubTypes;
    }

    /**
     * Set determines if include sub types.
     *
     * @param includeSubTypes the includeSubTypes value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withIncludeSubTypes(Boolean includeSubTypes) {
        this.includeSubTypes = includeSubTypes;
        return this;
    }

    /**
     * Get the limit of the search result.
     *
     * @return the limit value
     */
    public Integer limit() {
        return this.limit;
    }

    /**
     * Set the limit of the search result.
     *
     * @param limit the limit value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the offset of the search.
     *
     * @return the offset value
     */
    public Integer offset() {
        return this.offset;
    }

    /**
     * Set the offset of the search.
     *
     * @param offset the offset value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }

    /**
     * Get the search query.
     *
     * @return the query value
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the search query.
     *
     * @param query the query value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the tagFilters value.
     *
     * @return the tagFilters value
     */
    public JsonFilterCriteria tagFilters() {
        return this.tagFilters;
    }

    /**
     * Set the tagFilters value.
     *
     * @param tagFilters the tagFilters value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withTagFilters(JsonFilterCriteria tagFilters) {
        this.tagFilters = tagFilters;
        return this;
    }

    /**
     * Get the name of the term for search.
     *
     * @return the termName value
     */
    public String termName() {
        return this.termName;
    }

    /**
     * Set the name of the term for search.
     *
     * @param termName the termName value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withTermName(String termName) {
        this.termName = termName;
        return this;
    }

    /**
     * Get the name of the type for search.
     *
     * @return the typeName value
     */
    public String typeName() {
        return this.typeName;
    }

    /**
     * Set the name of the type for search.
     *
     * @param typeName the typeName value to set
     * @return the JsonSearchParameters object itself.
     */
    public JsonSearchParameters withTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

}
