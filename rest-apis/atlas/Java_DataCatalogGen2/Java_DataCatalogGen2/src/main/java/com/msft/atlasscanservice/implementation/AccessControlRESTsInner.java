/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.http.GET;
import retrofit2.http.HTTP;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import rx.Observable;
import rx.functions.Func1;

/**
 * An instance of this class provides access to all the operations defined
 * in AccessControlRESTs.
 */
public class AccessControlRESTsInner {
    /** The Retrofit service to perform REST calls. */
    private AccessControlRESTsService service;
    /** The service client containing this operation class. */
    private DataCatalogClientImpl client;

    /**
     * Initializes an instance of AccessControlRESTsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AccessControlRESTsInner(Retrofit retrofit, DataCatalogClientImpl client) {
        this.service = retrofit.create(AccessControlRESTsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AccessControlRESTs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AccessControlRESTsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.AccessControlRESTs addAdmin" })
        @PUT("access/admin/{userId}")
        Observable<Response<ResponseBody>> addAdmin(@Path("userId") String userId, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.AccessControlRESTs deleteAdmin" })
        @HTTP(path = "access/admin/{userId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAdmin(@Path("userId") String userId, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.AccessControlRESTs getAdmins" })
        @GET("access/admins")
        Observable<Response<ResponseBody>> getAdmins(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates an admin user.
     *
     * @param userId The user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void addAdmin(String userId) {
        addAdminWithServiceResponseAsync(userId).toBlocking().single().body();
    }

    /**
     * Creates an admin user.
     *
     * @param userId The user ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> addAdminAsync(String userId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(addAdminWithServiceResponseAsync(userId), serviceCallback);
    }

    /**
     * Creates an admin user.
     *
     * @param userId The user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> addAdminAsync(String userId) {
        return addAdminWithServiceResponseAsync(userId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates an admin user.
     *
     * @param userId The user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> addAdminWithServiceResponseAsync(String userId) {
        if (userId == null) {
            throw new IllegalArgumentException("Parameter userId is required and cannot be null.");
        }
        return service.addAdmin(userId, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = addAdminDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> addAdminDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes an admin user.
     *
     * @param userId The user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteAdmin(String userId) {
        deleteAdminWithServiceResponseAsync(userId).toBlocking().single().body();
    }

    /**
     * Deletes an admin user.
     *
     * @param userId The user ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAdminAsync(String userId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAdminWithServiceResponseAsync(userId), serviceCallback);
    }

    /**
     * Deletes an admin user.
     *
     * @param userId The user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAdminAsync(String userId) {
        return deleteAdminWithServiceResponseAsync(userId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an admin user.
     *
     * @param userId The user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteAdminWithServiceResponseAsync(String userId) {
        if (userId == null) {
            throw new IllegalArgumentException("Parameter userId is required and cannot be null.");
        }
        return service.deleteAdmin(userId, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteAdminDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteAdminDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists admin users.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JsonAzureCatalogUserInner&gt; object if successful.
     */
    public List<JsonAzureCatalogUserInner> getAdmins() {
        return getAdminsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists admin users.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JsonAzureCatalogUserInner>> getAdminsAsync(final ServiceCallback<List<JsonAzureCatalogUserInner>> serviceCallback) {
        return ServiceFuture.fromResponse(getAdminsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists admin users.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JsonAzureCatalogUserInner&gt; object
     */
    public Observable<List<JsonAzureCatalogUserInner>> getAdminsAsync() {
        return getAdminsWithServiceResponseAsync().map(new Func1<ServiceResponse<List<JsonAzureCatalogUserInner>>, List<JsonAzureCatalogUserInner>>() {
            @Override
            public List<JsonAzureCatalogUserInner> call(ServiceResponse<List<JsonAzureCatalogUserInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists admin users.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JsonAzureCatalogUserInner&gt; object
     */
    public Observable<ServiceResponse<List<JsonAzureCatalogUserInner>>> getAdminsWithServiceResponseAsync() {
        return service.getAdmins(this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<JsonAzureCatalogUserInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<JsonAzureCatalogUserInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<JsonAzureCatalogUserInner>> clientResponse = getAdminsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<JsonAzureCatalogUserInner>> getAdminsDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return this.client.restClient().responseBuilderFactory().<List<JsonAzureCatalogUserInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<JsonAzureCatalogUserInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
