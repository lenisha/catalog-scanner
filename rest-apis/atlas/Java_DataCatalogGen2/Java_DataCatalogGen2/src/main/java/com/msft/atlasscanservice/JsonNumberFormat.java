/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NumberFormat.
 * The number format.
 */
public class JsonNumberFormat {
    /**
     * The number format.
     */
    @JsonProperty(value = "availableLocales")
    private List<String> availableLocales;

    /**
     * The currency.
     */
    @JsonProperty(value = "currency")
    private String currency;

    /**
     * The currencyInstance property.
     */
    @JsonProperty(value = "currencyInstance")
    private JsonNumberFormat currencyInstance;

    /**
     * Determines if grouping is used.
     */
    @JsonProperty(value = "groupingUsed")
    private Boolean groupingUsed;

    /**
     * The instance property.
     */
    @JsonProperty(value = "instance")
    private JsonNumberFormat instance;

    /**
     * The integerInstance property.
     */
    @JsonProperty(value = "integerInstance")
    private JsonNumberFormat integerInstance;

    /**
     * The maximum of fraction digits.
     */
    @JsonProperty(value = "maximumFractionDigits")
    private Integer maximumFractionDigits;

    /**
     * The maximum of integer digits.
     */
    @JsonProperty(value = "maximumIntegerDigits")
    private Integer maximumIntegerDigits;

    /**
     * The minimum of fraction digits.
     */
    @JsonProperty(value = "minimumFractionDigits")
    private Integer minimumFractionDigits;

    /**
     * The minimum of integer digits.
     */
    @JsonProperty(value = "minimumIntegerDigits")
    private Integer minimumIntegerDigits;

    /**
     * The numberInstance property.
     */
    @JsonProperty(value = "numberInstance")
    private JsonNumberFormat numberInstance;

    /**
     * Determines if only integer is parsed.
     */
    @JsonProperty(value = "parseIntegerOnly")
    private Boolean parseIntegerOnly;

    /**
     * The percentInstance property.
     */
    @JsonProperty(value = "percentInstance")
    private JsonNumberFormat percentInstance;

    /**
     * Possible values include: 'UP', 'DOWN', 'CEILING', 'FLOOR', 'HALF_UP',
     * 'HALF_DOWN', 'HALF_EVEN', 'UNNECESSARY'.
     */
    @JsonProperty(value = "roundingMode")
    private String roundingMode;

    /**
     * Get the number format.
     *
     * @return the availableLocales value
     */
    public List<String> availableLocales() {
        return this.availableLocales;
    }

    /**
     * Set the number format.
     *
     * @param availableLocales the availableLocales value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withAvailableLocales(List<String> availableLocales) {
        this.availableLocales = availableLocales;
        return this;
    }

    /**
     * Get the currency.
     *
     * @return the currency value
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Set the currency.
     *
     * @param currency the currency value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withCurrency(String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get the currencyInstance value.
     *
     * @return the currencyInstance value
     */
    public JsonNumberFormat currencyInstance() {
        return this.currencyInstance;
    }

    /**
     * Set the currencyInstance value.
     *
     * @param currencyInstance the currencyInstance value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withCurrencyInstance(JsonNumberFormat currencyInstance) {
        this.currencyInstance = currencyInstance;
        return this;
    }

    /**
     * Get determines if grouping is used.
     *
     * @return the groupingUsed value
     */
    public Boolean groupingUsed() {
        return this.groupingUsed;
    }

    /**
     * Set determines if grouping is used.
     *
     * @param groupingUsed the groupingUsed value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withGroupingUsed(Boolean groupingUsed) {
        this.groupingUsed = groupingUsed;
        return this;
    }

    /**
     * Get the instance value.
     *
     * @return the instance value
     */
    public JsonNumberFormat instance() {
        return this.instance;
    }

    /**
     * Set the instance value.
     *
     * @param instance the instance value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withInstance(JsonNumberFormat instance) {
        this.instance = instance;
        return this;
    }

    /**
     * Get the integerInstance value.
     *
     * @return the integerInstance value
     */
    public JsonNumberFormat integerInstance() {
        return this.integerInstance;
    }

    /**
     * Set the integerInstance value.
     *
     * @param integerInstance the integerInstance value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withIntegerInstance(JsonNumberFormat integerInstance) {
        this.integerInstance = integerInstance;
        return this;
    }

    /**
     * Get the maximum of fraction digits.
     *
     * @return the maximumFractionDigits value
     */
    public Integer maximumFractionDigits() {
        return this.maximumFractionDigits;
    }

    /**
     * Set the maximum of fraction digits.
     *
     * @param maximumFractionDigits the maximumFractionDigits value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withMaximumFractionDigits(Integer maximumFractionDigits) {
        this.maximumFractionDigits = maximumFractionDigits;
        return this;
    }

    /**
     * Get the maximum of integer digits.
     *
     * @return the maximumIntegerDigits value
     */
    public Integer maximumIntegerDigits() {
        return this.maximumIntegerDigits;
    }

    /**
     * Set the maximum of integer digits.
     *
     * @param maximumIntegerDigits the maximumIntegerDigits value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withMaximumIntegerDigits(Integer maximumIntegerDigits) {
        this.maximumIntegerDigits = maximumIntegerDigits;
        return this;
    }

    /**
     * Get the minimum of fraction digits.
     *
     * @return the minimumFractionDigits value
     */
    public Integer minimumFractionDigits() {
        return this.minimumFractionDigits;
    }

    /**
     * Set the minimum of fraction digits.
     *
     * @param minimumFractionDigits the minimumFractionDigits value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withMinimumFractionDigits(Integer minimumFractionDigits) {
        this.minimumFractionDigits = minimumFractionDigits;
        return this;
    }

    /**
     * Get the minimum of integer digits.
     *
     * @return the minimumIntegerDigits value
     */
    public Integer minimumIntegerDigits() {
        return this.minimumIntegerDigits;
    }

    /**
     * Set the minimum of integer digits.
     *
     * @param minimumIntegerDigits the minimumIntegerDigits value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withMinimumIntegerDigits(Integer minimumIntegerDigits) {
        this.minimumIntegerDigits = minimumIntegerDigits;
        return this;
    }

    /**
     * Get the numberInstance value.
     *
     * @return the numberInstance value
     */
    public JsonNumberFormat numberInstance() {
        return this.numberInstance;
    }

    /**
     * Set the numberInstance value.
     *
     * @param numberInstance the numberInstance value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withNumberInstance(JsonNumberFormat numberInstance) {
        this.numberInstance = numberInstance;
        return this;
    }

    /**
     * Get determines if only integer is parsed.
     *
     * @return the parseIntegerOnly value
     */
    public Boolean parseIntegerOnly() {
        return this.parseIntegerOnly;
    }

    /**
     * Set determines if only integer is parsed.
     *
     * @param parseIntegerOnly the parseIntegerOnly value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withParseIntegerOnly(Boolean parseIntegerOnly) {
        this.parseIntegerOnly = parseIntegerOnly;
        return this;
    }

    /**
     * Get the percentInstance value.
     *
     * @return the percentInstance value
     */
    public JsonNumberFormat percentInstance() {
        return this.percentInstance;
    }

    /**
     * Set the percentInstance value.
     *
     * @param percentInstance the percentInstance value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withPercentInstance(JsonNumberFormat percentInstance) {
        this.percentInstance = percentInstance;
        return this;
    }

    /**
     * Get possible values include: 'UP', 'DOWN', 'CEILING', 'FLOOR', 'HALF_UP', 'HALF_DOWN', 'HALF_EVEN', 'UNNECESSARY'.
     *
     * @return the roundingMode value
     */
    public String roundingMode() {
        return this.roundingMode;
    }

    /**
     * Set possible values include: 'UP', 'DOWN', 'CEILING', 'FLOOR', 'HALF_UP', 'HALF_DOWN', 'HALF_EVEN', 'UNNECESSARY'.
     *
     * @param roundingMode the roundingMode value to set
     * @return the JsonNumberFormat object itself.
     */
    public JsonNumberFormat withRoundingMode(String roundingMode) {
        this.roundingMode = roundingMode;
        return this;
    }

}
