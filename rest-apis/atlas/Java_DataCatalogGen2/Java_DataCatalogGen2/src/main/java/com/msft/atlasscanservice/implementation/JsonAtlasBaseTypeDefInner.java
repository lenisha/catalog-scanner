/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice.implementation;

import com.msft.atlasscanservice.JsonDateFormat;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AtlasBaseTypeDef.
 * Base class that captures common-attributes for all Atlas types.
 */
public class JsonAtlasBaseTypeDefInner {
    /**
     * Possible values include: 'PRIMITIVE', 'OBJECT_ID_TYPE', 'ENUM',
     * 'STRUCT', 'CLASSIFICATION', 'ENTITY', 'ARRAY', 'MAP', 'RELATIONSHIP'.
     */
    @JsonProperty(value = "category")
    private String category;

    /**
     * The created time of the record.
     */
    @JsonProperty(value = "createTime")
    private Double createTime;

    /**
     * The user who created the record.
     */
    @JsonProperty(value = "createdBy")
    private String createdBy;

    /**
     * The dateFormatter property.
     */
    @JsonProperty(value = "dateFormatter")
    private JsonDateFormat dateFormatter;

    /**
     * The description of the type definition.
     */
    @JsonProperty(value = "description")
    private String description;

    /**
     * The GUID of the type definition.
     */
    @JsonProperty(value = "guid")
    private String guid;

    /**
     * The name of the type definition.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * The options for the type definition.
     */
    @JsonProperty(value = "options")
    private Map<String, String> options;

    /**
     * The version of the type.
     */
    @JsonProperty(value = "typeVersion")
    private String typeVersion;

    /**
     * The update time of the record.
     */
    @JsonProperty(value = "updateTime")
    private Double updateTime;

    /**
     * The user who updated the record.
     */
    @JsonProperty(value = "updatedBy")
    private String updatedBy;

    /**
     * The version of the record.
     */
    @JsonProperty(value = "version")
    private Double version;

    /**
     * Get possible values include: 'PRIMITIVE', 'OBJECT_ID_TYPE', 'ENUM', 'STRUCT', 'CLASSIFICATION', 'ENTITY', 'ARRAY', 'MAP', 'RELATIONSHIP'.
     *
     * @return the category value
     */
    public String category() {
        return this.category;
    }

    /**
     * Set possible values include: 'PRIMITIVE', 'OBJECT_ID_TYPE', 'ENUM', 'STRUCT', 'CLASSIFICATION', 'ENTITY', 'ARRAY', 'MAP', 'RELATIONSHIP'.
     *
     * @param category the category value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Get the created time of the record.
     *
     * @return the createTime value
     */
    public Double createTime() {
        return this.createTime;
    }

    /**
     * Set the created time of the record.
     *
     * @param createTime the createTime value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withCreateTime(Double createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get the user who created the record.
     *
     * @return the createdBy value
     */
    public String createdBy() {
        return this.createdBy;
    }

    /**
     * Set the user who created the record.
     *
     * @param createdBy the createdBy value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get the dateFormatter value.
     *
     * @return the dateFormatter value
     */
    public JsonDateFormat dateFormatter() {
        return this.dateFormatter;
    }

    /**
     * Set the dateFormatter value.
     *
     * @param dateFormatter the dateFormatter value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withDateFormatter(JsonDateFormat dateFormatter) {
        this.dateFormatter = dateFormatter;
        return this;
    }

    /**
     * Get the description of the type definition.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description of the type definition.
     *
     * @param description the description value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the GUID of the type definition.
     *
     * @return the guid value
     */
    public String guid() {
        return this.guid;
    }

    /**
     * Set the GUID of the type definition.
     *
     * @param guid the guid value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withGuid(String guid) {
        this.guid = guid;
        return this;
    }

    /**
     * Get the name of the type definition.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name of the type definition.
     *
     * @param name the name value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the options for the type definition.
     *
     * @return the options value
     */
    public Map<String, String> options() {
        return this.options;
    }

    /**
     * Set the options for the type definition.
     *
     * @param options the options value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withOptions(Map<String, String> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the version of the type.
     *
     * @return the typeVersion value
     */
    public String typeVersion() {
        return this.typeVersion;
    }

    /**
     * Set the version of the type.
     *
     * @param typeVersion the typeVersion value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withTypeVersion(String typeVersion) {
        this.typeVersion = typeVersion;
        return this;
    }

    /**
     * Get the update time of the record.
     *
     * @return the updateTime value
     */
    public Double updateTime() {
        return this.updateTime;
    }

    /**
     * Set the update time of the record.
     *
     * @param updateTime the updateTime value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withUpdateTime(Double updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get the user who updated the record.
     *
     * @return the updatedBy value
     */
    public String updatedBy() {
        return this.updatedBy;
    }

    /**
     * Set the user who updated the record.
     *
     * @param updatedBy the updatedBy value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * Get the version of the record.
     *
     * @return the version value
     */
    public Double version() {
        return this.version;
    }

    /**
     * Set the version of the record.
     *
     * @param version the version value to set
     * @return the JsonAtlasBaseTypeDefInner object itself.
     */
    public JsonAtlasBaseTypeDefInner withVersion(Double version) {
        this.version = version;
        return this;
    }

}
