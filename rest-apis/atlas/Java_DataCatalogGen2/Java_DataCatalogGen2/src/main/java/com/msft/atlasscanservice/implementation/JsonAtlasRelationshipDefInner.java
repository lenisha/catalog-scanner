/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice.implementation;

import com.msft.atlasscanservice.JsonAtlasRelationshipEndDef;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AtlasRelationshipDef.
 * AtlasRelationshipDef is a TypeDef that defines a relationship.
 * &lt;p&gt;
 * As with other typeDefs the AtlasRelationshipDef has a name. Once created the
 * RelationshipDef has a guid.
 * The name and the guid are the 2 ways that the RelationshipDef is identified.
 * &lt;p&gt;
 * RelationshipDefs have 2 ends, each of which specify cardinality, an
 * EntityDef type name and name and optionally
 * whether the end is a container.
 * &lt;p&gt;
 * RelationshipDefs can have AttributeDefs - though only primitive types are
 * allowed. &lt;br&gt;
 * RelationshipDefs have a relationshipCategory specifying the UML type of
 * relationship required &lt;br&gt;
 * RelationshipDefs also have a PropogateTag - indicating which way tags could
 * flow over the relationships.
 * &lt;p&gt;
 * The way EntityDefs and RelationshipDefs are intended to be used is that
 * EntityDefs will define AttributeDefs these AttributeDefs
 * will not specify an EntityDef type name as their types.
 * &lt;p&gt;
 * RelationshipDefs introduce new atributes to the entity instances. For
 * example
 * &lt;p&gt;
 * EntityDef A might have attributes attr1,attr2,attr3 &lt;br&gt;
 * EntityDef B might have attributes attr4,attr5,attr6 &lt;br&gt;
 * RelationshipDef AtoB might define 2 ends &lt;br&gt;
 *
 * &lt;pre&gt;
 * end1:  type A, name attr7
 * end2:  type B, name attr8  &lt;/pre&gt;
 *
 * &lt;p&gt;
 * When an instance of EntityDef A is created, it will have attributes
 * attr1,attr2,attr3,attr7 &lt;br&gt;
 * When an instance of EntityDef B is created, it will have attributes
 * attr4,attr5,attr6,attr8
 * &lt;p&gt;
 * In this way relationshipDefs can be authored separately from entityDefs and
 * can inject relationship attributes into
 * the entity instances.
 */
public class JsonAtlasRelationshipDefInner extends JsonAtlasStructDefInner {
    /**
     * The endDef1 property.
     */
    @JsonProperty(value = "endDef1")
    private JsonAtlasRelationshipEndDef endDef1;

    /**
     * The endDef2 property.
     */
    @JsonProperty(value = "endDef2")
    private JsonAtlasRelationshipEndDef endDef2;

    /**
     * Possible values include: 'NONE', 'ONE_TO_TWO', 'TWO_TO_ONE', 'BOTH'.
     */
    @JsonProperty(value = "propagateTags")
    private String propagateTags;

    /**
     * Possible values include: 'ASSOCIATION', 'AGGREGATION', 'COMPOSITION'.
     */
    @JsonProperty(value = "relationshipCategory")
    private String relationshipCategory;

    /**
     * The label of the relationship.
     */
    @JsonProperty(value = "relationshipLabel")
    private String relationshipLabel;

    /**
     * Get the endDef1 value.
     *
     * @return the endDef1 value
     */
    public JsonAtlasRelationshipEndDef endDef1() {
        return this.endDef1;
    }

    /**
     * Set the endDef1 value.
     *
     * @param endDef1 the endDef1 value to set
     * @return the JsonAtlasRelationshipDefInner object itself.
     */
    public JsonAtlasRelationshipDefInner withEndDef1(JsonAtlasRelationshipEndDef endDef1) {
        this.endDef1 = endDef1;
        return this;
    }

    /**
     * Get the endDef2 value.
     *
     * @return the endDef2 value
     */
    public JsonAtlasRelationshipEndDef endDef2() {
        return this.endDef2;
    }

    /**
     * Set the endDef2 value.
     *
     * @param endDef2 the endDef2 value to set
     * @return the JsonAtlasRelationshipDefInner object itself.
     */
    public JsonAtlasRelationshipDefInner withEndDef2(JsonAtlasRelationshipEndDef endDef2) {
        this.endDef2 = endDef2;
        return this;
    }

    /**
     * Get possible values include: 'NONE', 'ONE_TO_TWO', 'TWO_TO_ONE', 'BOTH'.
     *
     * @return the propagateTags value
     */
    public String propagateTags() {
        return this.propagateTags;
    }

    /**
     * Set possible values include: 'NONE', 'ONE_TO_TWO', 'TWO_TO_ONE', 'BOTH'.
     *
     * @param propagateTags the propagateTags value to set
     * @return the JsonAtlasRelationshipDefInner object itself.
     */
    public JsonAtlasRelationshipDefInner withPropagateTags(String propagateTags) {
        this.propagateTags = propagateTags;
        return this;
    }

    /**
     * Get possible values include: 'ASSOCIATION', 'AGGREGATION', 'COMPOSITION'.
     *
     * @return the relationshipCategory value
     */
    public String relationshipCategory() {
        return this.relationshipCategory;
    }

    /**
     * Set possible values include: 'ASSOCIATION', 'AGGREGATION', 'COMPOSITION'.
     *
     * @param relationshipCategory the relationshipCategory value to set
     * @return the JsonAtlasRelationshipDefInner object itself.
     */
    public JsonAtlasRelationshipDefInner withRelationshipCategory(String relationshipCategory) {
        this.relationshipCategory = relationshipCategory;
        return this;
    }

    /**
     * Get the label of the relationship.
     *
     * @return the relationshipLabel value
     */
    public String relationshipLabel() {
        return this.relationshipLabel;
    }

    /**
     * Set the label of the relationship.
     *
     * @param relationshipLabel the relationshipLabel value to set
     * @return the JsonAtlasRelationshipDefInner object itself.
     */
    public JsonAtlasRelationshipDefInner withRelationshipLabel(String relationshipLabel) {
        this.relationshipLabel = relationshipLabel;
        return this;
    }

}
