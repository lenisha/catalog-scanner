/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice.implementation;

import java.util.List;
import com.msft.atlasscanservice.JsonAtlasObjectId;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.msft.atlasscanservice.JsonAtlasStruct;

/**
 * AtlasRelationship.
 * Atlas relationship instance.
 */
public class JsonAtlasRelationshipInner extends JsonAtlasStruct {
    /**
     * An array of blocked propagated classifications.
     */
    @JsonProperty(value = "blockedPropagatedClassifications")
    private List<JsonAtlasClassificationInner> blockedPropagatedClassifications;

    /**
     * The created time of the record.
     */
    @JsonProperty(value = "createTime")
    private Double createTime;

    /**
     * The user who created the record.
     */
    @JsonProperty(value = "createdBy")
    private String createdBy;

    /**
     * The end1 property.
     */
    @JsonProperty(value = "end1")
    private JsonAtlasObjectId end1;

    /**
     * The end2 property.
     */
    @JsonProperty(value = "end2")
    private JsonAtlasObjectId end2;

    /**
     * The GUID of the relationship.
     */
    @JsonProperty(value = "guid")
    private String guid;

    /**
     * The home ID of the relationship.
     */
    @JsonProperty(value = "homeId")
    private String homeId;

    /**
     * The label of the relationship.
     */
    @JsonProperty(value = "label")
    private String label;

    /**
     * Possible values include: 'NONE', 'ONE_TO_TWO', 'TWO_TO_ONE', 'BOTH'.
     */
    @JsonProperty(value = "propagateTags")
    private String propagateTags;

    /**
     * An array of propagated classifications.
     */
    @JsonProperty(value = "propagatedClassifications")
    private List<JsonAtlasClassificationInner> propagatedClassifications;

    /**
     * Possible values include: 'ACTIVE', 'DELETED'.
     */
    @JsonProperty(value = "status")
    private String status;

    /**
     * The update time of the record.
     */
    @JsonProperty(value = "updateTime")
    private Double updateTime;

    /**
     * The user who updated the record.
     */
    @JsonProperty(value = "updatedBy")
    private String updatedBy;

    /**
     * The version of the relationship.
     */
    @JsonProperty(value = "version")
    private Double version;

    /**
     * Get an array of blocked propagated classifications.
     *
     * @return the blockedPropagatedClassifications value
     */
    public List<JsonAtlasClassificationInner> blockedPropagatedClassifications() {
        return this.blockedPropagatedClassifications;
    }

    /**
     * Set an array of blocked propagated classifications.
     *
     * @param blockedPropagatedClassifications the blockedPropagatedClassifications value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withBlockedPropagatedClassifications(List<JsonAtlasClassificationInner> blockedPropagatedClassifications) {
        this.blockedPropagatedClassifications = blockedPropagatedClassifications;
        return this;
    }

    /**
     * Get the created time of the record.
     *
     * @return the createTime value
     */
    public Double createTime() {
        return this.createTime;
    }

    /**
     * Set the created time of the record.
     *
     * @param createTime the createTime value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withCreateTime(Double createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get the user who created the record.
     *
     * @return the createdBy value
     */
    public String createdBy() {
        return this.createdBy;
    }

    /**
     * Set the user who created the record.
     *
     * @param createdBy the createdBy value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get the end1 value.
     *
     * @return the end1 value
     */
    public JsonAtlasObjectId end1() {
        return this.end1;
    }

    /**
     * Set the end1 value.
     *
     * @param end1 the end1 value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withEnd1(JsonAtlasObjectId end1) {
        this.end1 = end1;
        return this;
    }

    /**
     * Get the end2 value.
     *
     * @return the end2 value
     */
    public JsonAtlasObjectId end2() {
        return this.end2;
    }

    /**
     * Set the end2 value.
     *
     * @param end2 the end2 value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withEnd2(JsonAtlasObjectId end2) {
        this.end2 = end2;
        return this;
    }

    /**
     * Get the GUID of the relationship.
     *
     * @return the guid value
     */
    public String guid() {
        return this.guid;
    }

    /**
     * Set the GUID of the relationship.
     *
     * @param guid the guid value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withGuid(String guid) {
        this.guid = guid;
        return this;
    }

    /**
     * Get the home ID of the relationship.
     *
     * @return the homeId value
     */
    public String homeId() {
        return this.homeId;
    }

    /**
     * Set the home ID of the relationship.
     *
     * @param homeId the homeId value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withHomeId(String homeId) {
        this.homeId = homeId;
        return this;
    }

    /**
     * Get the label of the relationship.
     *
     * @return the label value
     */
    public String label() {
        return this.label;
    }

    /**
     * Set the label of the relationship.
     *
     * @param label the label value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get possible values include: 'NONE', 'ONE_TO_TWO', 'TWO_TO_ONE', 'BOTH'.
     *
     * @return the propagateTags value
     */
    public String propagateTags() {
        return this.propagateTags;
    }

    /**
     * Set possible values include: 'NONE', 'ONE_TO_TWO', 'TWO_TO_ONE', 'BOTH'.
     *
     * @param propagateTags the propagateTags value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withPropagateTags(String propagateTags) {
        this.propagateTags = propagateTags;
        return this;
    }

    /**
     * Get an array of propagated classifications.
     *
     * @return the propagatedClassifications value
     */
    public List<JsonAtlasClassificationInner> propagatedClassifications() {
        return this.propagatedClassifications;
    }

    /**
     * Set an array of propagated classifications.
     *
     * @param propagatedClassifications the propagatedClassifications value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withPropagatedClassifications(List<JsonAtlasClassificationInner> propagatedClassifications) {
        this.propagatedClassifications = propagatedClassifications;
        return this;
    }

    /**
     * Get possible values include: 'ACTIVE', 'DELETED'.
     *
     * @return the status value
     */
    public String status() {
        return this.status;
    }

    /**
     * Set possible values include: 'ACTIVE', 'DELETED'.
     *
     * @param status the status value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the update time of the record.
     *
     * @return the updateTime value
     */
    public Double updateTime() {
        return this.updateTime;
    }

    /**
     * Set the update time of the record.
     *
     * @param updateTime the updateTime value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withUpdateTime(Double updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get the user who updated the record.
     *
     * @return the updatedBy value
     */
    public String updatedBy() {
        return this.updatedBy;
    }

    /**
     * Set the user who updated the record.
     *
     * @param updatedBy the updatedBy value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * Get the version of the relationship.
     *
     * @return the version value
     */
    public Double version() {
        return this.version;
    }

    /**
     * Set the version of the relationship.
     *
     * @param version the version value to set
     * @return the JsonAtlasRelationshipInner object itself.
     */
    public JsonAtlasRelationshipInner withVersion(Double version) {
        this.version = version;
        return this;
    }

}
