/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HTTP;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import retrofit2.http.Query;
import rx.Observable;
import rx.functions.Func1;

/**
 * An instance of this class provides access to all the operations defined
 * in RelationshipRESTs.
 */
public class RelationshipRESTsInner {
    /** The Retrofit service to perform REST calls. */
    private RelationshipRESTsService service;
    /** The service client containing this operation class. */
    private DataCatalogClientImpl client;

    /**
     * Initializes an instance of RelationshipRESTsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RelationshipRESTsInner(Retrofit retrofit, DataCatalogClientImpl client) {
        this.service = retrofit.create(RelationshipRESTsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RelationshipRESTs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RelationshipRESTsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.RelationshipRESTs create" })
        @POST("v2/relationship")
        Observable<Response<ResponseBody>> create(@Body JsonAtlasRelationshipInner relationship, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.RelationshipRESTs update" })
        @PUT("v2/relationship")
        Observable<Response<ResponseBody>> update(@Body JsonAtlasRelationshipInner relationship, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.RelationshipRESTs getById2" })
        @GET("v2/relationship/guid/{guid}")
        Observable<Response<ResponseBody>> getById2(@Path("guid") String guid, @Query("extendedInfo") Boolean extendedInfo, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.atlasscanservice.RelationshipRESTs deleteById" })
        @HTTP(path = "v2/relationship/guid/{guid}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteById(@Path("guid") String guid, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a new relationship between entities.
     *
     * @param relationship The AtlasRelationship object containing the information for the relationship to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JsonAtlasRelationshipInner object if successful.
     */
    public JsonAtlasRelationshipInner create(JsonAtlasRelationshipInner relationship) {
        return createWithServiceResponseAsync(relationship).toBlocking().single().body();
    }

    /**
     * Creates a new relationship between entities.
     *
     * @param relationship The AtlasRelationship object containing the information for the relationship to be created.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JsonAtlasRelationshipInner> createAsync(JsonAtlasRelationshipInner relationship, final ServiceCallback<JsonAtlasRelationshipInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(relationship), serviceCallback);
    }

    /**
     * Creates a new relationship between entities.
     *
     * @param relationship The AtlasRelationship object containing the information for the relationship to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasRelationshipInner object
     */
    public Observable<JsonAtlasRelationshipInner> createAsync(JsonAtlasRelationshipInner relationship) {
        return createWithServiceResponseAsync(relationship).map(new Func1<ServiceResponse<JsonAtlasRelationshipInner>, JsonAtlasRelationshipInner>() {
            @Override
            public JsonAtlasRelationshipInner call(ServiceResponse<JsonAtlasRelationshipInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new relationship between entities.
     *
     * @param relationship The AtlasRelationship object containing the information for the relationship to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasRelationshipInner object
     */
    public Observable<ServiceResponse<JsonAtlasRelationshipInner>> createWithServiceResponseAsync(JsonAtlasRelationshipInner relationship) {
        if (relationship == null) {
            throw new IllegalArgumentException("Parameter relationship is required and cannot be null.");
        }
        Validator.validate(relationship);
        return service.create(relationship, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JsonAtlasRelationshipInner>>>() {
                @Override
                public Observable<ServiceResponse<JsonAtlasRelationshipInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JsonAtlasRelationshipInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JsonAtlasRelationshipInner> createDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JsonAtlasRelationshipInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<JsonAtlasRelationshipInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates an existing relationship between entities.
     *
     * @param relationship The AtlasRelationship object containing the information for the relationship to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JsonAtlasRelationshipInner object if successful.
     */
    public JsonAtlasRelationshipInner update(JsonAtlasRelationshipInner relationship) {
        return updateWithServiceResponseAsync(relationship).toBlocking().single().body();
    }

    /**
     * Updates an existing relationship between entities.
     *
     * @param relationship The AtlasRelationship object containing the information for the relationship to be created.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JsonAtlasRelationshipInner> updateAsync(JsonAtlasRelationshipInner relationship, final ServiceCallback<JsonAtlasRelationshipInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(relationship), serviceCallback);
    }

    /**
     * Updates an existing relationship between entities.
     *
     * @param relationship The AtlasRelationship object containing the information for the relationship to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasRelationshipInner object
     */
    public Observable<JsonAtlasRelationshipInner> updateAsync(JsonAtlasRelationshipInner relationship) {
        return updateWithServiceResponseAsync(relationship).map(new Func1<ServiceResponse<JsonAtlasRelationshipInner>, JsonAtlasRelationshipInner>() {
            @Override
            public JsonAtlasRelationshipInner call(ServiceResponse<JsonAtlasRelationshipInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates an existing relationship between entities.
     *
     * @param relationship The AtlasRelationship object containing the information for the relationship to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasRelationshipInner object
     */
    public Observable<ServiceResponse<JsonAtlasRelationshipInner>> updateWithServiceResponseAsync(JsonAtlasRelationshipInner relationship) {
        if (relationship == null) {
            throw new IllegalArgumentException("Parameter relationship is required and cannot be null.");
        }
        Validator.validate(relationship);
        return service.update(relationship, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JsonAtlasRelationshipInner>>>() {
                @Override
                public Observable<ServiceResponse<JsonAtlasRelationshipInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JsonAtlasRelationshipInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JsonAtlasRelationshipInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JsonAtlasRelationshipInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<JsonAtlasRelationshipInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets relationship information between entities by its GUID.
     *
     * @param guid The globally unique identifier of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JsonAtlasRelationshipWithExtInfoInner object if successful.
     */
    public JsonAtlasRelationshipWithExtInfoInner getById2(String guid) {
        return getById2WithServiceResponseAsync(guid).toBlocking().single().body();
    }

    /**
     * Gets relationship information between entities by its GUID.
     *
     * @param guid The globally unique identifier of the relationship.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JsonAtlasRelationshipWithExtInfoInner> getById2Async(String guid, final ServiceCallback<JsonAtlasRelationshipWithExtInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(getById2WithServiceResponseAsync(guid), serviceCallback);
    }

    /**
     * Gets relationship information between entities by its GUID.
     *
     * @param guid The globally unique identifier of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasRelationshipWithExtInfoInner object
     */
    public Observable<JsonAtlasRelationshipWithExtInfoInner> getById2Async(String guid) {
        return getById2WithServiceResponseAsync(guid).map(new Func1<ServiceResponse<JsonAtlasRelationshipWithExtInfoInner>, JsonAtlasRelationshipWithExtInfoInner>() {
            @Override
            public JsonAtlasRelationshipWithExtInfoInner call(ServiceResponse<JsonAtlasRelationshipWithExtInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets relationship information between entities by its GUID.
     *
     * @param guid The globally unique identifier of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JsonAtlasRelationshipWithExtInfoInner object
     */
    public Observable<ServiceResponse<JsonAtlasRelationshipWithExtInfoInner>> getById2WithServiceResponseAsync(String guid) {
        if (guid == null) {
            throw new IllegalArgumentException("Parameter guid is required and cannot be null.");
        }
        return service.getById2(guid, this.client.extendedInfo(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JsonAtlasRelationshipWithExtInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<JsonAtlasRelationshipWithExtInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JsonAtlasRelationshipWithExtInfoInner> clientResponse = getById2Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JsonAtlasRelationshipWithExtInfoInner> getById2Delegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JsonAtlasRelationshipWithExtInfoInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JsonAtlasRelationshipWithExtInfoInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a relationship between entities by its GUID.
     *
     * @param guid The globally unique identifier of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteById(String guid) {
        deleteByIdWithServiceResponseAsync(guid).toBlocking().single().body();
    }

    /**
     * Deletes a relationship between entities by its GUID.
     *
     * @param guid The globally unique identifier of the relationship.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteByIdAsync(String guid, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteByIdWithServiceResponseAsync(guid), serviceCallback);
    }

    /**
     * Deletes a relationship between entities by its GUID.
     *
     * @param guid The globally unique identifier of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteByIdAsync(String guid) {
        return deleteByIdWithServiceResponseAsync(guid).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a relationship between entities by its GUID.
     *
     * @param guid The globally unique identifier of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteByIdWithServiceResponseAsync(String guid) {
        if (guid == null) {
            throw new IllegalArgumentException("Parameter guid is required and cannot be null.");
        }
        return service.deleteById(guid, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteByIdDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
