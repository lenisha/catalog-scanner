/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.msft.atlasscanservice;

import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AtlasAttributeDef.
 * class that captures details of a struct-attribute.
 */
public class JsonAtlasAttributeDef {
    /**
     * Possible values include: 'SINGLE', 'LIST', 'SET'.
     */
    @JsonProperty(value = "cardinality")
    private String cardinality;

    /**
     * An array of constraints.
     */
    @JsonProperty(value = "constraints")
    private List<JsonAtlasConstraintDef> constraints;

    /**
     * The default value of the attribute.
     */
    @JsonProperty(value = "defaultValue")
    private String defaultValue;

    /**
     * The description of the attribute.
     */
    @JsonProperty(value = "description")
    private String description;

    /**
     * Determines if it is included in notification.
     */
    @JsonProperty(value = "includeInNotification")
    private Boolean includeInNotification;

    /**
     * Determines if it is indexable.
     */
    @JsonProperty(value = "isIndexable")
    private Boolean isIndexable;

    /**
     * Determines if it is optional.
     */
    @JsonProperty(value = "isOptional")
    private Boolean isOptional;

    /**
     * Determines if it unique.
     */
    @JsonProperty(value = "isUnique")
    private Boolean isUnique;

    /**
     * The name of the attribute.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * The options for the attribute.
     */
    @JsonProperty(value = "options")
    private Map<String, String> options;

    /**
     * The name of the type.
     */
    @JsonProperty(value = "typeName")
    private String typeName;

    /**
     * The maximum count of the values.
     */
    @JsonProperty(value = "valuesMaxCount")
    private Integer valuesMaxCount;

    /**
     * The minimum count of the values.
     */
    @JsonProperty(value = "valuesMinCount")
    private Integer valuesMinCount;

    /**
     * Get possible values include: 'SINGLE', 'LIST', 'SET'.
     *
     * @return the cardinality value
     */
    public String cardinality() {
        return this.cardinality;
    }

    /**
     * Set possible values include: 'SINGLE', 'LIST', 'SET'.
     *
     * @param cardinality the cardinality value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withCardinality(String cardinality) {
        this.cardinality = cardinality;
        return this;
    }

    /**
     * Get an array of constraints.
     *
     * @return the constraints value
     */
    public List<JsonAtlasConstraintDef> constraints() {
        return this.constraints;
    }

    /**
     * Set an array of constraints.
     *
     * @param constraints the constraints value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withConstraints(List<JsonAtlasConstraintDef> constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Get the default value of the attribute.
     *
     * @return the defaultValue value
     */
    public String defaultValue() {
        return this.defaultValue;
    }

    /**
     * Set the default value of the attribute.
     *
     * @param defaultValue the defaultValue value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * Get the description of the attribute.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description of the attribute.
     *
     * @param description the description value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get determines if it is included in notification.
     *
     * @return the includeInNotification value
     */
    public Boolean includeInNotification() {
        return this.includeInNotification;
    }

    /**
     * Set determines if it is included in notification.
     *
     * @param includeInNotification the includeInNotification value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withIncludeInNotification(Boolean includeInNotification) {
        this.includeInNotification = includeInNotification;
        return this;
    }

    /**
     * Get determines if it is indexable.
     *
     * @return the isIndexable value
     */
    public Boolean isIndexable() {
        return this.isIndexable;
    }

    /**
     * Set determines if it is indexable.
     *
     * @param isIndexable the isIndexable value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withIsIndexable(Boolean isIndexable) {
        this.isIndexable = isIndexable;
        return this;
    }

    /**
     * Get determines if it is optional.
     *
     * @return the isOptional value
     */
    public Boolean isOptional() {
        return this.isOptional;
    }

    /**
     * Set determines if it is optional.
     *
     * @param isOptional the isOptional value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withIsOptional(Boolean isOptional) {
        this.isOptional = isOptional;
        return this;
    }

    /**
     * Get determines if it unique.
     *
     * @return the isUnique value
     */
    public Boolean isUnique() {
        return this.isUnique;
    }

    /**
     * Set determines if it unique.
     *
     * @param isUnique the isUnique value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withIsUnique(Boolean isUnique) {
        this.isUnique = isUnique;
        return this;
    }

    /**
     * Get the name of the attribute.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name of the attribute.
     *
     * @param name the name value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the options for the attribute.
     *
     * @return the options value
     */
    public Map<String, String> options() {
        return this.options;
    }

    /**
     * Set the options for the attribute.
     *
     * @param options the options value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withOptions(Map<String, String> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the name of the type.
     *
     * @return the typeName value
     */
    public String typeName() {
        return this.typeName;
    }

    /**
     * Set the name of the type.
     *
     * @param typeName the typeName value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the maximum count of the values.
     *
     * @return the valuesMaxCount value
     */
    public Integer valuesMaxCount() {
        return this.valuesMaxCount;
    }

    /**
     * Set the maximum count of the values.
     *
     * @param valuesMaxCount the valuesMaxCount value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withValuesMaxCount(Integer valuesMaxCount) {
        this.valuesMaxCount = valuesMaxCount;
        return this;
    }

    /**
     * Get the minimum count of the values.
     *
     * @return the valuesMinCount value
     */
    public Integer valuesMinCount() {
        return this.valuesMinCount;
    }

    /**
     * Set the minimum count of the values.
     *
     * @param valuesMinCount the valuesMinCount value to set
     * @return the JsonAtlasAttributeDef object itself.
     */
    public JsonAtlasAttributeDef withValuesMinCount(Integer valuesMinCount) {
        this.valuesMinCount = valuesMinCount;
        return this;
    }

}
