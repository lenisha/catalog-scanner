/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.msft.babylonscanningservice;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.msft.babylonscanningservice.models.ClassificationRule;
import com.msft.babylonscanningservice.models.ClassificationRuleList;
import com.msft.babylonscanningservice.models.ClassificationRuleVersionAction;
import com.msft.babylonscanningservice.models.ErrorResponseModelException;
import com.msft.babylonscanningservice.models.OperationResponse;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ClassificationRules.
 */
public interface ClassificationRules {
    /**
     * Get a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRule object if successful.
     */
    ClassificationRule get(String classificationRuleName);

    /**
     * Get a classification rule.
     *
     * @param classificationRuleName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ClassificationRule> getAsync(String classificationRuleName, final ServiceCallback<ClassificationRule> serviceCallback);

    /**
     * Get a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    Observable<ClassificationRule> getAsync(String classificationRuleName);

    /**
     * Get a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    Observable<ServiceResponse<ClassificationRule>> getWithServiceResponseAsync(String classificationRuleName);

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRule object if successful.
     */
    ClassificationRule createOrUpdate(String classificationRuleName);

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ClassificationRule> createOrUpdateAsync(String classificationRuleName, final ServiceCallback<ClassificationRule> serviceCallback);

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    Observable<ClassificationRule> createOrUpdateAsync(String classificationRuleName);

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    Observable<ServiceResponse<ClassificationRule>> createOrUpdateWithServiceResponseAsync(String classificationRuleName);
    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param body the ClassificationRule value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRule object if successful.
     */
    ClassificationRule createOrUpdate(String classificationRuleName, ClassificationRule body);

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param body the ClassificationRule value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ClassificationRule> createOrUpdateAsync(String classificationRuleName, ClassificationRule body, final ServiceCallback<ClassificationRule> serviceCallback);

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param body the ClassificationRule value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    Observable<ClassificationRule> createOrUpdateAsync(String classificationRuleName, ClassificationRule body);

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param body the ClassificationRule value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    Observable<ServiceResponse<ClassificationRule>> createOrUpdateWithServiceResponseAsync(String classificationRuleName, ClassificationRule body);

    /**
     * Deletes a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String classificationRuleName);

    /**
     * Deletes a classification rule.
     *
     * @param classificationRuleName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String classificationRuleName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String classificationRuleName);

    /**
     * Deletes a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String classificationRuleName);

    /**
     * List classification rules in Account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRuleList object if successful.
     */
    ClassificationRuleList listAll();

    /**
     * List classification rules in Account.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ClassificationRuleList> listAllAsync(final ServiceCallback<ClassificationRuleList> serviceCallback);

    /**
     * List classification rules in Account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    Observable<ClassificationRuleList> listAllAsync();

    /**
     * List classification rules in Account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    Observable<ServiceResponse<ClassificationRuleList>> listAllWithServiceResponseAsync();
    /**
     * List classification rules in Account.
     *
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRuleList object if successful.
     */
    ClassificationRuleList listAll(String skipToken);

    /**
     * List classification rules in Account.
     *
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ClassificationRuleList> listAllAsync(String skipToken, final ServiceCallback<ClassificationRuleList> serviceCallback);

    /**
     * List classification rules in Account.
     *
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    Observable<ClassificationRuleList> listAllAsync(String skipToken);

    /**
     * List classification rules in Account.
     *
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    Observable<ServiceResponse<ClassificationRuleList>> listAllWithServiceResponseAsync(String skipToken);

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRuleList object if successful.
     */
    ClassificationRuleList listVersionsByClassificationRuleName(String classificationRuleName);

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ClassificationRuleList> listVersionsByClassificationRuleNameAsync(String classificationRuleName, final ServiceCallback<ClassificationRuleList> serviceCallback);

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    Observable<ClassificationRuleList> listVersionsByClassificationRuleNameAsync(String classificationRuleName);

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    Observable<ServiceResponse<ClassificationRuleList>> listVersionsByClassificationRuleNameWithServiceResponseAsync(String classificationRuleName);
    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRuleList object if successful.
     */
    ClassificationRuleList listVersionsByClassificationRuleName(String classificationRuleName, String skipToken);

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ClassificationRuleList> listVersionsByClassificationRuleNameAsync(String classificationRuleName, String skipToken, final ServiceCallback<ClassificationRuleList> serviceCallback);

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    Observable<ClassificationRuleList> listVersionsByClassificationRuleNameAsync(String classificationRuleName, String skipToken);

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    Observable<ServiceResponse<ClassificationRuleList>> listVersionsByClassificationRuleNameWithServiceResponseAsync(String classificationRuleName, String skipToken);

    /**
     * Sets Classification Action on a specific classification rule version.
     *
     * @param classificationRuleName the String value
     * @param classificationRuleVersion the int value
     * @param body the ClassificationRuleVersionAction value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResponse object if successful.
     */
    OperationResponse setClassificationActionForVersion(String classificationRuleName, int classificationRuleVersion, ClassificationRuleVersionAction body);

    /**
     * Sets Classification Action on a specific classification rule version.
     *
     * @param classificationRuleName the String value
     * @param classificationRuleVersion the int value
     * @param body the ClassificationRuleVersionAction value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationResponse> setClassificationActionForVersionAsync(String classificationRuleName, int classificationRuleVersion, ClassificationRuleVersionAction body, final ServiceCallback<OperationResponse> serviceCallback);

    /**
     * Sets Classification Action on a specific classification rule version.
     *
     * @param classificationRuleName the String value
     * @param classificationRuleVersion the int value
     * @param body the ClassificationRuleVersionAction value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    Observable<OperationResponse> setClassificationActionForVersionAsync(String classificationRuleName, int classificationRuleVersion, ClassificationRuleVersionAction body);

    /**
     * Sets Classification Action on a specific classification rule version.
     *
     * @param classificationRuleName the String value
     * @param classificationRuleVersion the int value
     * @param body the ClassificationRuleVersionAction value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    Observable<ServiceResponse<OperationResponse>> setClassificationActionForVersionWithServiceResponseAsync(String classificationRuleName, int classificationRuleVersion, ClassificationRuleVersionAction body);

}
