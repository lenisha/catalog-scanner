/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.msft.babylonscanningservice;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.msft.babylonscanningservice.models.ErrorResponseModelException;
import com.msft.babylonscanningservice.models.Trigger;
import com.msft.babylonscanningservice.models.TriggerList;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Triggers.
 */
public interface Triggers {
    /**
     * Gets trigger information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Trigger object if successful.
     */
    Trigger getTrigger(String dataSourceName, String scanName, String triggerName);

    /**
     * Gets trigger information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Trigger> getTriggerAsync(String dataSourceName, String scanName, String triggerName, final ServiceCallback<Trigger> serviceCallback);

    /**
     * Gets trigger information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Trigger object
     */
    Observable<Trigger> getTriggerAsync(String dataSourceName, String scanName, String triggerName);

    /**
     * Gets trigger information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Trigger object
     */
    Observable<ServiceResponse<Trigger>> getTriggerWithServiceResponseAsync(String dataSourceName, String scanName, String triggerName);

    /**
     * Creates an instance of a trigger.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @param body the Trigger value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Trigger object if successful.
     */
    Trigger createTrigger(String dataSourceName, String scanName, String triggerName, Trigger body);

    /**
     * Creates an instance of a trigger.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @param body the Trigger value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Trigger> createTriggerAsync(String dataSourceName, String scanName, String triggerName, Trigger body, final ServiceCallback<Trigger> serviceCallback);

    /**
     * Creates an instance of a trigger.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @param body the Trigger value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Trigger object
     */
    Observable<Trigger> createTriggerAsync(String dataSourceName, String scanName, String triggerName, Trigger body);

    /**
     * Creates an instance of a trigger.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @param body the Trigger value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Trigger object
     */
    Observable<ServiceResponse<Trigger>> createTriggerWithServiceResponseAsync(String dataSourceName, String scanName, String triggerName, Trigger body);

    /**
     * Deletes the trigger associated with the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteTrigger(String dataSourceName, String scanName, String triggerName);

    /**
     * Deletes the trigger associated with the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteTriggerAsync(String dataSourceName, String scanName, String triggerName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the trigger associated with the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteTriggerAsync(String dataSourceName, String scanName, String triggerName);

    /**
     * Deletes the trigger associated with the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param triggerName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteTriggerWithServiceResponseAsync(String dataSourceName, String scanName, String triggerName);

    /**
     * List triggers in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TriggerList object if successful.
     */
    TriggerList listByScan(String dataSourceName, String scanName);

    /**
     * List triggers in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TriggerList> listByScanAsync(String dataSourceName, String scanName, final ServiceCallback<TriggerList> serviceCallback);

    /**
     * List triggers in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TriggerList object
     */
    Observable<TriggerList> listByScanAsync(String dataSourceName, String scanName);

    /**
     * List triggers in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TriggerList object
     */
    Observable<ServiceResponse<TriggerList>> listByScanWithServiceResponseAsync(String dataSourceName, String scanName);
    /**
     * List triggers in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TriggerList object if successful.
     */
    TriggerList listByScan(String dataSourceName, String scanName, String skipToken);

    /**
     * List triggers in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TriggerList> listByScanAsync(String dataSourceName, String scanName, String skipToken, final ServiceCallback<TriggerList> serviceCallback);

    /**
     * List triggers in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TriggerList object
     */
    Observable<TriggerList> listByScanAsync(String dataSourceName, String scanName, String skipToken);

    /**
     * List triggers in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TriggerList object
     */
    Observable<ServiceResponse<TriggerList>> listByScanWithServiceResponseAsync(String dataSourceName, String scanName, String skipToken);

}
