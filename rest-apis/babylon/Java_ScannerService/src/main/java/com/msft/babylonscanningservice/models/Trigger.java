/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.msft.babylonscanningservice.models;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * The Trigger model.
 */
@JsonFlatten
public class Trigger extends ProxyResource {
    /**
     * The recurrenceInterval property.
     */
    @JsonProperty(value = "properties.recurrenceInterval")
    private String recurrenceInterval;

    /**
     * The timeoutInterval property.
     */
    @JsonProperty(value = "properties.timeoutInterval")
    private String timeoutInterval;

    /**
     * The createdAt property.
     */
    @JsonProperty(value = "properties.createdAt", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime createdAt;

    /**
     * The lastModifiedAt property.
     */
    @JsonProperty(value = "properties.lastModifiedAt", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastModifiedAt;

    /**
     * The lastScheduled property.
     */
    @JsonProperty(value = "properties.lastScheduled", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastScheduled;

    /**
     * Possible values include: 'Full', 'Incremental'.
     */
    @JsonProperty(value = "properties.scanLevel")
    private String scanLevel;

    /**
     * The incrementalScanStartTime property.
     */
    @JsonProperty(value = "properties.incrementalScanStartTime")
    private DateTime incrementalScanStartTime;

    /**
     * Get the recurrenceInterval value.
     *
     * @return the recurrenceInterval value
     */
    public String recurrenceInterval() {
        return this.recurrenceInterval;
    }

    /**
     * Set the recurrenceInterval value.
     *
     * @param recurrenceInterval the recurrenceInterval value to set
     * @return the Trigger object itself.
     */
    public Trigger withRecurrenceInterval(String recurrenceInterval) {
        this.recurrenceInterval = recurrenceInterval;
        return this;
    }

    /**
     * Get the timeoutInterval value.
     *
     * @return the timeoutInterval value
     */
    public String timeoutInterval() {
        return this.timeoutInterval;
    }

    /**
     * Set the timeoutInterval value.
     *
     * @param timeoutInterval the timeoutInterval value to set
     * @return the Trigger object itself.
     */
    public Trigger withTimeoutInterval(String timeoutInterval) {
        this.timeoutInterval = timeoutInterval;
        return this;
    }

    /**
     * Get the createdAt value.
     *
     * @return the createdAt value
     */
    public DateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Get the lastModifiedAt value.
     *
     * @return the lastModifiedAt value
     */
    public DateTime lastModifiedAt() {
        return this.lastModifiedAt;
    }

    /**
     * Get the lastScheduled value.
     *
     * @return the lastScheduled value
     */
    public DateTime lastScheduled() {
        return this.lastScheduled;
    }

    /**
     * Get possible values include: 'Full', 'Incremental'.
     *
     * @return the scanLevel value
     */
    public String scanLevel() {
        return this.scanLevel;
    }

    /**
     * Set possible values include: 'Full', 'Incremental'.
     *
     * @param scanLevel the scanLevel value to set
     * @return the Trigger object itself.
     */
    public Trigger withScanLevel(String scanLevel) {
        this.scanLevel = scanLevel;
        return this;
    }

    /**
     * Get the incrementalScanStartTime value.
     *
     * @return the incrementalScanStartTime value
     */
    public DateTime incrementalScanStartTime() {
        return this.incrementalScanStartTime;
    }

    /**
     * Set the incrementalScanStartTime value.
     *
     * @param incrementalScanStartTime the incrementalScanStartTime value to set
     * @return the Trigger object itself.
     */
    public Trigger withIncrementalScanStartTime(DateTime incrementalScanStartTime) {
        this.incrementalScanStartTime = incrementalScanStartTime;
        return this;
    }

}
