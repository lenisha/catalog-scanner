/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.msft.babylonscanningservice.implementation;

import retrofit2.Retrofit;
import com.msft.babylonscanningservice.Filters;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import com.msft.babylonscanningservice.models.ErrorResponseModelException;
import com.msft.babylonscanningservice.models.Filter;
import com.msft.babylonscanningservice.models.FilterList;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HTTP;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import retrofit2.http.Query;
import rx.Observable;
import rx.functions.Func1;

/**
 * An instance of this class provides access to all the operations defined
 * in Filters.
 */
public class FiltersImpl implements Filters {
    /** The Retrofit service to perform REST calls. */
    private FiltersService service;
    /** The service client containing this operation class. */
    private MicrosoftScanningClientImpl client;

    /**
     * Initializes an instance of Filters.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public FiltersImpl(Retrofit retrofit, MicrosoftScanningClientImpl client) {
        this.service = retrofit.create(FiltersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Filters to be
     * used by Retrofit to perform actually REST calls.
     */
    interface FiltersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Filters get" })
        @GET("datasources/{dataSourceName}/scans/{scanName}/filters/custom")
        Observable<Response<ResponseBody>> get(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Filters createOrUpdate" })
        @PUT("datasources/{dataSourceName}/scans/{scanName}/filters/custom")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion, @Body Filter body);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Filters delete" })
        @HTTP(path = "datasources/{dataSourceName}/scans/{scanName}/filters/custom", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Filters listByScan" })
        @GET("datasources/{dataSourceName}/scans/{scanName}/filters")
        Observable<Response<ResponseBody>> listByScan(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Query("$skipToken") String skipToken, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

    }

    /**
     * Get a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Filter object if successful.
     */
    public Filter get(String dataSourceName, String scanName) {
        return getWithServiceResponseAsync(dataSourceName, scanName).toBlocking().single().body();
    }

    /**
     * Get a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Filter> getAsync(String dataSourceName, String scanName, final ServiceCallback<Filter> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(dataSourceName, scanName), serviceCallback);
    }

    /**
     * Get a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    public Observable<Filter> getAsync(String dataSourceName, String scanName) {
        return getWithServiceResponseAsync(dataSourceName, scanName).map(new Func1<ServiceResponse<Filter>, Filter>() {
            @Override
            public Filter call(ServiceResponse<Filter> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    public Observable<ServiceResponse<Filter>> getWithServiceResponseAsync(String dataSourceName, String scanName) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Filter>>>() {
                @Override
                public Observable<ServiceResponse<Filter>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Filter> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Filter> getDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Filter, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Filter>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Filter object if successful.
     */
    public Filter createOrUpdate(String dataSourceName, String scanName) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, scanName).toBlocking().single().body();
    }

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Filter> createOrUpdateAsync(String dataSourceName, String scanName, final ServiceCallback<Filter> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(dataSourceName, scanName), serviceCallback);
    }

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    public Observable<Filter> createOrUpdateAsync(String dataSourceName, String scanName) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, scanName).map(new Func1<ServiceResponse<Filter>, Filter>() {
            @Override
            public Filter call(ServiceResponse<Filter> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    public Observable<ServiceResponse<Filter>> createOrUpdateWithServiceResponseAsync(String dataSourceName, String scanName) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Filter body = null;
        return service.createOrUpdate(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Filter>>>() {
                @Override
                public Observable<ServiceResponse<Filter>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Filter> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Filter value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Filter object if successful.
     */
    public Filter createOrUpdate(String dataSourceName, String scanName, Filter body) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, scanName, body).toBlocking().single().body();
    }

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Filter value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Filter> createOrUpdateAsync(String dataSourceName, String scanName, Filter body, final ServiceCallback<Filter> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(dataSourceName, scanName, body), serviceCallback);
    }

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Filter value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    public Observable<Filter> createOrUpdateAsync(String dataSourceName, String scanName, Filter body) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, scanName, body).map(new Func1<ServiceResponse<Filter>, Filter>() {
            @Override
            public Filter call(ServiceResponse<Filter> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Filter value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    public Observable<ServiceResponse<Filter>> createOrUpdateWithServiceResponseAsync(String dataSourceName, String scanName, Filter body) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(body);
        return service.createOrUpdate(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Filter>>>() {
                @Override
                public Observable<ServiceResponse<Filter>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Filter> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Filter> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Filter, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Filter>() { }.getType())
                .register(201, new TypeToken<Filter>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Deletes a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String dataSourceName, String scanName) {
        deleteWithServiceResponseAsync(dataSourceName, scanName).toBlocking().single().body();
    }

    /**
     * Deletes a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String dataSourceName, String scanName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(dataSourceName, scanName), serviceCallback);
    }

    /**
     * Deletes a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String dataSourceName, String scanName) {
        return deleteWithServiceResponseAsync(dataSourceName, scanName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String dataSourceName, String scanName) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FilterList object if successful.
     */
    public FilterList listByScan(String dataSourceName, String scanName) {
        return listByScanWithServiceResponseAsync(dataSourceName, scanName).toBlocking().single().body();
    }

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FilterList> listByScanAsync(String dataSourceName, String scanName, final ServiceCallback<FilterList> serviceCallback) {
        return ServiceFuture.fromResponse(listByScanWithServiceResponseAsync(dataSourceName, scanName), serviceCallback);
    }

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FilterList object
     */
    public Observable<FilterList> listByScanAsync(String dataSourceName, String scanName) {
        return listByScanWithServiceResponseAsync(dataSourceName, scanName).map(new Func1<ServiceResponse<FilterList>, FilterList>() {
            @Override
            public FilterList call(ServiceResponse<FilterList> response) {
                return response.body();
            }
        });
    }

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FilterList object
     */
    public Observable<ServiceResponse<FilterList>> listByScanWithServiceResponseAsync(String dataSourceName, String scanName) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.listByScan(dataSourceName, scanName, skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FilterList>>>() {
                @Override
                public Observable<ServiceResponse<FilterList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FilterList> clientResponse = listByScanDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FilterList object if successful.
     */
    public FilterList listByScan(String dataSourceName, String scanName, String skipToken) {
        return listByScanWithServiceResponseAsync(dataSourceName, scanName, skipToken).toBlocking().single().body();
    }

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FilterList> listByScanAsync(String dataSourceName, String scanName, String skipToken, final ServiceCallback<FilterList> serviceCallback) {
        return ServiceFuture.fromResponse(listByScanWithServiceResponseAsync(dataSourceName, scanName, skipToken), serviceCallback);
    }

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FilterList object
     */
    public Observable<FilterList> listByScanAsync(String dataSourceName, String scanName, String skipToken) {
        return listByScanWithServiceResponseAsync(dataSourceName, scanName, skipToken).map(new Func1<ServiceResponse<FilterList>, FilterList>() {
            @Override
            public FilterList call(ServiceResponse<FilterList> response) {
                return response.body();
            }
        });
    }

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FilterList object
     */
    public Observable<ServiceResponse<FilterList>> listByScanWithServiceResponseAsync(String dataSourceName, String scanName, String skipToken) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByScan(dataSourceName, scanName, skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FilterList>>>() {
                @Override
                public Observable<ServiceResponse<FilterList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FilterList> clientResponse = listByScanDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FilterList> listByScanDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FilterList, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FilterList>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

}
