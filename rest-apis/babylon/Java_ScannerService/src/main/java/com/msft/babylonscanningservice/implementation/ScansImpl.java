/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.msft.babylonscanningservice.implementation;

import retrofit2.Retrofit;
import com.msft.babylonscanningservice.Scans;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import com.msft.babylonscanningservice.models.CancelScanRequest;
import com.msft.babylonscanningservice.models.ErrorResponseModelException;
import com.msft.babylonscanningservice.models.OperationResponse;
import com.msft.babylonscanningservice.models.Scan;
import com.msft.babylonscanningservice.models.ScanHistoryList;
import com.msft.babylonscanningservice.models.ScanList;
import com.msft.babylonscanningservice.models.ScanRunProperties;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HTTP;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import retrofit2.http.Query;
import rx.Observable;
import rx.functions.Func1;

/**
 * An instance of this class provides access to all the operations defined
 * in Scans.
 */
public class ScansImpl implements Scans {
    /** The Retrofit service to perform REST calls. */
    private ScansService service;
    /** The service client containing this operation class. */
    private MicrosoftScanningClientImpl client;

    /**
     * Initializes an instance of Scans.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ScansImpl(Retrofit retrofit, MicrosoftScanningClientImpl client) {
        this.service = retrofit.create(ScansService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Scans to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ScansService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Scans run" })
        @POST("datasources/{dataSourceName}/scans/{scanName}/run")
        Observable<Response<ResponseBody>> run(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion, @Body ScanRunProperties body);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Scans cancel" })
        @POST("datasources/{dataSourceName}/scans/{scanName}/cancel")
        Observable<Response<ResponseBody>> cancel(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion, @Body CancelScanRequest body);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Scans listHistory" })
        @POST("datasources/{dataSourceName}/scans/{scanName}/listHistory")
        Observable<Response<ResponseBody>> listHistory(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Query("$skipToken") String skipToken, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Scans createOrUpdate" })
        @PUT("datasources/{dataSourceName}/scans/{scanName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion, @Body Scan body);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Scans get" })
        @GET("datasources/{dataSourceName}/scans/{scanName}")
        Observable<Response<ResponseBody>> get(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Scans delete" })
        @HTTP(path = "datasources/{dataSourceName}/scans/{scanName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("dataSourceName") String dataSourceName, @Path("scanName") String scanName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.Scans listByDataSource" })
        @GET("datasources/{dataSourceName}/scans")
        Observable<Response<ResponseBody>> listByDataSource(@Path("dataSourceName") String dataSourceName, @Query("$skipToken") String skipToken, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

    }

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResponse object if successful.
     */
    public OperationResponse run(String dataSourceName, String scanName) {
        return runWithServiceResponseAsync(dataSourceName, scanName).toBlocking().single().body();
    }

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResponse> runAsync(String dataSourceName, String scanName, final ServiceCallback<OperationResponse> serviceCallback) {
        return ServiceFuture.fromResponse(runWithServiceResponseAsync(dataSourceName, scanName), serviceCallback);
    }

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    public Observable<OperationResponse> runAsync(String dataSourceName, String scanName) {
        return runWithServiceResponseAsync(dataSourceName, scanName).map(new Func1<ServiceResponse<OperationResponse>, OperationResponse>() {
            @Override
            public OperationResponse call(ServiceResponse<OperationResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    public Observable<ServiceResponse<OperationResponse>> runWithServiceResponseAsync(String dataSourceName, String scanName) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ScanRunProperties body = null;
        return service.run(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationResponse>>>() {
                @Override
                public Observable<ServiceResponse<OperationResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationResponse> clientResponse = runDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the ScanRunProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResponse object if successful.
     */
    public OperationResponse run(String dataSourceName, String scanName, ScanRunProperties body) {
        return runWithServiceResponseAsync(dataSourceName, scanName, body).toBlocking().single().body();
    }

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the ScanRunProperties value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResponse> runAsync(String dataSourceName, String scanName, ScanRunProperties body, final ServiceCallback<OperationResponse> serviceCallback) {
        return ServiceFuture.fromResponse(runWithServiceResponseAsync(dataSourceName, scanName, body), serviceCallback);
    }

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the ScanRunProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    public Observable<OperationResponse> runAsync(String dataSourceName, String scanName, ScanRunProperties body) {
        return runWithServiceResponseAsync(dataSourceName, scanName, body).map(new Func1<ServiceResponse<OperationResponse>, OperationResponse>() {
            @Override
            public OperationResponse call(ServiceResponse<OperationResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the ScanRunProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    public Observable<ServiceResponse<OperationResponse>> runWithServiceResponseAsync(String dataSourceName, String scanName, ScanRunProperties body) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(body);
        return service.run(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationResponse>>>() {
                @Override
                public Observable<ServiceResponse<OperationResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationResponse> clientResponse = runDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationResponse> runDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationResponse, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationResponse>() { }.getType())
                .register(202, new TypeToken<OperationResponse>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Cancels a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the CancelScanRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void cancel(String dataSourceName, String scanName, CancelScanRequest body) {
        cancelWithServiceResponseAsync(dataSourceName, scanName, body).toBlocking().single().body();
    }

    /**
     * Cancels a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the CancelScanRequest value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> cancelAsync(String dataSourceName, String scanName, CancelScanRequest body, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(cancelWithServiceResponseAsync(dataSourceName, scanName, body), serviceCallback);
    }

    /**
     * Cancels a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the CancelScanRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> cancelAsync(String dataSourceName, String scanName, CancelScanRequest body) {
        return cancelWithServiceResponseAsync(dataSourceName, scanName, body).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the CancelScanRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> cancelWithServiceResponseAsync(String dataSourceName, String scanName, CancelScanRequest body) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.cancel(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = cancelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> cancelDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanHistoryList object if successful.
     */
    public ScanHistoryList listHistory(String dataSourceName, String scanName) {
        return listHistoryWithServiceResponseAsync(dataSourceName, scanName).toBlocking().single().body();
    }

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ScanHistoryList> listHistoryAsync(String dataSourceName, String scanName, final ServiceCallback<ScanHistoryList> serviceCallback) {
        return ServiceFuture.fromResponse(listHistoryWithServiceResponseAsync(dataSourceName, scanName), serviceCallback);
    }

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanHistoryList object
     */
    public Observable<ScanHistoryList> listHistoryAsync(String dataSourceName, String scanName) {
        return listHistoryWithServiceResponseAsync(dataSourceName, scanName).map(new Func1<ServiceResponse<ScanHistoryList>, ScanHistoryList>() {
            @Override
            public ScanHistoryList call(ServiceResponse<ScanHistoryList> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanHistoryList object
     */
    public Observable<ServiceResponse<ScanHistoryList>> listHistoryWithServiceResponseAsync(String dataSourceName, String scanName) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.listHistory(dataSourceName, scanName, skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ScanHistoryList>>>() {
                @Override
                public Observable<ServiceResponse<ScanHistoryList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ScanHistoryList> clientResponse = listHistoryDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanHistoryList object if successful.
     */
    public ScanHistoryList listHistory(String dataSourceName, String scanName, String skipToken) {
        return listHistoryWithServiceResponseAsync(dataSourceName, scanName, skipToken).toBlocking().single().body();
    }

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ScanHistoryList> listHistoryAsync(String dataSourceName, String scanName, String skipToken, final ServiceCallback<ScanHistoryList> serviceCallback) {
        return ServiceFuture.fromResponse(listHistoryWithServiceResponseAsync(dataSourceName, scanName, skipToken), serviceCallback);
    }

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanHistoryList object
     */
    public Observable<ScanHistoryList> listHistoryAsync(String dataSourceName, String scanName, String skipToken) {
        return listHistoryWithServiceResponseAsync(dataSourceName, scanName, skipToken).map(new Func1<ServiceResponse<ScanHistoryList>, ScanHistoryList>() {
            @Override
            public ScanHistoryList call(ServiceResponse<ScanHistoryList> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanHistoryList object
     */
    public Observable<ServiceResponse<ScanHistoryList>> listHistoryWithServiceResponseAsync(String dataSourceName, String scanName, String skipToken) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listHistory(dataSourceName, scanName, skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ScanHistoryList>>>() {
                @Override
                public Observable<ServiceResponse<ScanHistoryList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ScanHistoryList> clientResponse = listHistoryDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ScanHistoryList> listHistoryDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ScanHistoryList, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ScanHistoryList>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Creates an instance of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Scan value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Scan object if successful.
     */
    public Scan createOrUpdate(String dataSourceName, String scanName, Scan body) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, scanName, body).toBlocking().single().body();
    }

    /**
     * Creates an instance of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Scan value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Scan> createOrUpdateAsync(String dataSourceName, String scanName, Scan body, final ServiceCallback<Scan> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(dataSourceName, scanName, body), serviceCallback);
    }

    /**
     * Creates an instance of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Scan value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Scan object
     */
    public Observable<Scan> createOrUpdateAsync(String dataSourceName, String scanName, Scan body) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, scanName, body).map(new Func1<ServiceResponse<Scan>, Scan>() {
            @Override
            public Scan call(ServiceResponse<Scan> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates an instance of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Scan value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Scan object
     */
    public Observable<ServiceResponse<Scan>> createOrUpdateWithServiceResponseAsync(String dataSourceName, String scanName, Scan body) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.createOrUpdate(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Scan>>>() {
                @Override
                public Observable<ServiceResponse<Scan>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Scan> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Scan> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Scan, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Scan>() { }.getType())
                .register(201, new TypeToken<Scan>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Gets a scan information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Scan object if successful.
     */
    public Scan get(String dataSourceName, String scanName) {
        return getWithServiceResponseAsync(dataSourceName, scanName).toBlocking().single().body();
    }

    /**
     * Gets a scan information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Scan> getAsync(String dataSourceName, String scanName, final ServiceCallback<Scan> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(dataSourceName, scanName), serviceCallback);
    }

    /**
     * Gets a scan information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Scan object
     */
    public Observable<Scan> getAsync(String dataSourceName, String scanName) {
        return getWithServiceResponseAsync(dataSourceName, scanName).map(new Func1<ServiceResponse<Scan>, Scan>() {
            @Override
            public Scan call(ServiceResponse<Scan> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a scan information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Scan object
     */
    public Observable<ServiceResponse<Scan>> getWithServiceResponseAsync(String dataSourceName, String scanName) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Scan>>>() {
                @Override
                public Observable<ServiceResponse<Scan>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Scan> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Scan> getDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Scan, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Scan>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Deletes the scan associated with the data source.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String dataSourceName, String scanName) {
        deleteWithServiceResponseAsync(dataSourceName, scanName).toBlocking().single().body();
    }

    /**
     * Deletes the scan associated with the data source.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String dataSourceName, String scanName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(dataSourceName, scanName), serviceCallback);
    }

    /**
     * Deletes the scan associated with the data source.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String dataSourceName, String scanName) {
        return deleteWithServiceResponseAsync(dataSourceName, scanName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the scan associated with the data source.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String dataSourceName, String scanName) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (scanName == null) {
            throw new IllegalArgumentException("Parameter scanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(dataSourceName, scanName, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanList object if successful.
     */
    public ScanList listByDataSource(String dataSourceName) {
        return listByDataSourceWithServiceResponseAsync(dataSourceName).toBlocking().single().body();
    }

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ScanList> listByDataSourceAsync(String dataSourceName, final ServiceCallback<ScanList> serviceCallback) {
        return ServiceFuture.fromResponse(listByDataSourceWithServiceResponseAsync(dataSourceName), serviceCallback);
    }

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanList object
     */
    public Observable<ScanList> listByDataSourceAsync(String dataSourceName) {
        return listByDataSourceWithServiceResponseAsync(dataSourceName).map(new Func1<ServiceResponse<ScanList>, ScanList>() {
            @Override
            public ScanList call(ServiceResponse<ScanList> response) {
                return response.body();
            }
        });
    }

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanList object
     */
    public Observable<ServiceResponse<ScanList>> listByDataSourceWithServiceResponseAsync(String dataSourceName) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.listByDataSource(dataSourceName, skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ScanList>>>() {
                @Override
                public Observable<ServiceResponse<ScanList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ScanList> clientResponse = listByDataSourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanList object if successful.
     */
    public ScanList listByDataSource(String dataSourceName, String skipToken) {
        return listByDataSourceWithServiceResponseAsync(dataSourceName, skipToken).toBlocking().single().body();
    }

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ScanList> listByDataSourceAsync(String dataSourceName, String skipToken, final ServiceCallback<ScanList> serviceCallback) {
        return ServiceFuture.fromResponse(listByDataSourceWithServiceResponseAsync(dataSourceName, skipToken), serviceCallback);
    }

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanList object
     */
    public Observable<ScanList> listByDataSourceAsync(String dataSourceName, String skipToken) {
        return listByDataSourceWithServiceResponseAsync(dataSourceName, skipToken).map(new Func1<ServiceResponse<ScanList>, ScanList>() {
            @Override
            public ScanList call(ServiceResponse<ScanList> response) {
                return response.body();
            }
        });
    }

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanList object
     */
    public Observable<ServiceResponse<ScanList>> listByDataSourceWithServiceResponseAsync(String dataSourceName, String skipToken) {
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDataSource(dataSourceName, skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ScanList>>>() {
                @Override
                public Observable<ServiceResponse<ScanList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ScanList> clientResponse = listByDataSourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ScanList> listByDataSourceDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ScanList, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ScanList>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

}
