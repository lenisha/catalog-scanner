/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.msft.babylonscanningservice;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.msft.babylonscanningservice.models.ErrorResponseModelException;
import com.msft.babylonscanningservice.models.Filter;
import com.msft.babylonscanningservice.models.FilterList;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Filters.
 */
public interface Filters {
    /**
     * Get a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Filter object if successful.
     */
    Filter get(String dataSourceName, String scanName);

    /**
     * Get a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Filter> getAsync(String dataSourceName, String scanName, final ServiceCallback<Filter> serviceCallback);

    /**
     * Get a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    Observable<Filter> getAsync(String dataSourceName, String scanName);

    /**
     * Get a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    Observable<ServiceResponse<Filter>> getWithServiceResponseAsync(String dataSourceName, String scanName);

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Filter object if successful.
     */
    Filter createOrUpdate(String dataSourceName, String scanName);

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Filter> createOrUpdateAsync(String dataSourceName, String scanName, final ServiceCallback<Filter> serviceCallback);

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    Observable<Filter> createOrUpdateAsync(String dataSourceName, String scanName);

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    Observable<ServiceResponse<Filter>> createOrUpdateWithServiceResponseAsync(String dataSourceName, String scanName);
    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Filter value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Filter object if successful.
     */
    Filter createOrUpdate(String dataSourceName, String scanName, Filter body);

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Filter value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Filter> createOrUpdateAsync(String dataSourceName, String scanName, Filter body, final ServiceCallback<Filter> serviceCallback);

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Filter value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    Observable<Filter> createOrUpdateAsync(String dataSourceName, String scanName, Filter body);

    /**
     * Creates or updates a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Filter value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Filter object
     */
    Observable<ServiceResponse<Filter>> createOrUpdateWithServiceResponseAsync(String dataSourceName, String scanName, Filter body);

    /**
     * Deletes a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String dataSourceName, String scanName);

    /**
     * Deletes a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String dataSourceName, String scanName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String dataSourceName, String scanName);

    /**
     * Deletes a filter.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String dataSourceName, String scanName);

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FilterList object if successful.
     */
    FilterList listByScan(String dataSourceName, String scanName);

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FilterList> listByScanAsync(String dataSourceName, String scanName, final ServiceCallback<FilterList> serviceCallback);

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FilterList object
     */
    Observable<FilterList> listByScanAsync(String dataSourceName, String scanName);

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FilterList object
     */
    Observable<ServiceResponse<FilterList>> listByScanWithServiceResponseAsync(String dataSourceName, String scanName);
    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FilterList object if successful.
     */
    FilterList listByScan(String dataSourceName, String scanName, String skipToken);

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FilterList> listByScanAsync(String dataSourceName, String scanName, String skipToken, final ServiceCallback<FilterList> serviceCallback);

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FilterList object
     */
    Observable<FilterList> listByScanAsync(String dataSourceName, String scanName, String skipToken);

    /**
     * List filters in Scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FilterList object
     */
    Observable<ServiceResponse<FilterList>> listByScanWithServiceResponseAsync(String dataSourceName, String scanName, String skipToken);

}
