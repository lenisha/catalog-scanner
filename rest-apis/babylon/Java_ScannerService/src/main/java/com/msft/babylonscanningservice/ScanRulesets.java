/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.msft.babylonscanningservice;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.msft.babylonscanningservice.models.ErrorResponseModelException;
import com.msft.babylonscanningservice.models.ScanRuleset;
import com.msft.babylonscanningservice.models.ScanRulesetList;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ScanRulesets.
 */
public interface ScanRulesets {
    /**
     * Get a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanRuleset object if successful.
     */
    ScanRuleset get(String scanRulesetName);

    /**
     * Get a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ScanRuleset> getAsync(String scanRulesetName, final ServiceCallback<ScanRuleset> serviceCallback);

    /**
     * Get a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRuleset object
     */
    Observable<ScanRuleset> getAsync(String scanRulesetName);

    /**
     * Get a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRuleset object
     */
    Observable<ServiceResponse<ScanRuleset>> getWithServiceResponseAsync(String scanRulesetName);

    /**
     * Creates or Updates a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanRuleset object if successful.
     */
    ScanRuleset createOrUpdate(String scanRulesetName);

    /**
     * Creates or Updates a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ScanRuleset> createOrUpdateAsync(String scanRulesetName, final ServiceCallback<ScanRuleset> serviceCallback);

    /**
     * Creates or Updates a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRuleset object
     */
    Observable<ScanRuleset> createOrUpdateAsync(String scanRulesetName);

    /**
     * Creates or Updates a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRuleset object
     */
    Observable<ServiceResponse<ScanRuleset>> createOrUpdateWithServiceResponseAsync(String scanRulesetName);
    /**
     * Creates or Updates a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @param body the ScanRuleset value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanRuleset object if successful.
     */
    ScanRuleset createOrUpdate(String scanRulesetName, ScanRuleset body);

    /**
     * Creates or Updates a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @param body the ScanRuleset value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ScanRuleset> createOrUpdateAsync(String scanRulesetName, ScanRuleset body, final ServiceCallback<ScanRuleset> serviceCallback);

    /**
     * Creates or Updates a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @param body the ScanRuleset value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRuleset object
     */
    Observable<ScanRuleset> createOrUpdateAsync(String scanRulesetName, ScanRuleset body);

    /**
     * Creates or Updates a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @param body the ScanRuleset value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRuleset object
     */
    Observable<ServiceResponse<ScanRuleset>> createOrUpdateWithServiceResponseAsync(String scanRulesetName, ScanRuleset body);

    /**
     * Deletes a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String scanRulesetName);

    /**
     * Deletes a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String scanRulesetName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String scanRulesetName);

    /**
     * Deletes a scan ruleset.
     *
     * @param scanRulesetName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String scanRulesetName);

    /**
     * List scan rulesets in Data catalog.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanRulesetList object if successful.
     */
    ScanRulesetList listAll();

    /**
     * List scan rulesets in Data catalog.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ScanRulesetList> listAllAsync(final ServiceCallback<ScanRulesetList> serviceCallback);

    /**
     * List scan rulesets in Data catalog.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRulesetList object
     */
    Observable<ScanRulesetList> listAllAsync();

    /**
     * List scan rulesets in Data catalog.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRulesetList object
     */
    Observable<ServiceResponse<ScanRulesetList>> listAllWithServiceResponseAsync();
    /**
     * List scan rulesets in Data catalog.
     *
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanRulesetList object if successful.
     */
    ScanRulesetList listAll(String skipToken);

    /**
     * List scan rulesets in Data catalog.
     *
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ScanRulesetList> listAllAsync(String skipToken, final ServiceCallback<ScanRulesetList> serviceCallback);

    /**
     * List scan rulesets in Data catalog.
     *
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRulesetList object
     */
    Observable<ScanRulesetList> listAllAsync(String skipToken);

    /**
     * List scan rulesets in Data catalog.
     *
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanRulesetList object
     */
    Observable<ServiceResponse<ScanRulesetList>> listAllWithServiceResponseAsync(String skipToken);

}
