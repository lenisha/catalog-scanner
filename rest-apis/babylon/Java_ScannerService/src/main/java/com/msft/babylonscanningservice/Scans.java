/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.msft.babylonscanningservice;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.msft.babylonscanningservice.models.CancelScanRequest;
import com.msft.babylonscanningservice.models.ErrorResponseModelException;
import com.msft.babylonscanningservice.models.OperationResponse;
import com.msft.babylonscanningservice.models.Scan;
import com.msft.babylonscanningservice.models.ScanHistoryList;
import com.msft.babylonscanningservice.models.ScanList;
import com.msft.babylonscanningservice.models.ScanRunProperties;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Scans.
 */
public interface Scans {
    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResponse object if successful.
     */
    OperationResponse run(String dataSourceName, String scanName);

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationResponse> runAsync(String dataSourceName, String scanName, final ServiceCallback<OperationResponse> serviceCallback);

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    Observable<OperationResponse> runAsync(String dataSourceName, String scanName);

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    Observable<ServiceResponse<OperationResponse>> runWithServiceResponseAsync(String dataSourceName, String scanName);
    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the ScanRunProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResponse object if successful.
     */
    OperationResponse run(String dataSourceName, String scanName, ScanRunProperties body);

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the ScanRunProperties value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationResponse> runAsync(String dataSourceName, String scanName, ScanRunProperties body, final ServiceCallback<OperationResponse> serviceCallback);

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the ScanRunProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    Observable<OperationResponse> runAsync(String dataSourceName, String scanName, ScanRunProperties body);

    /**
     * Runs the scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the ScanRunProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    Observable<ServiceResponse<OperationResponse>> runWithServiceResponseAsync(String dataSourceName, String scanName, ScanRunProperties body);

    /**
     * Cancels a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the CancelScanRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void cancel(String dataSourceName, String scanName, CancelScanRequest body);

    /**
     * Cancels a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the CancelScanRequest value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> cancelAsync(String dataSourceName, String scanName, CancelScanRequest body, final ServiceCallback<Void> serviceCallback);

    /**
     * Cancels a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the CancelScanRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> cancelAsync(String dataSourceName, String scanName, CancelScanRequest body);

    /**
     * Cancels a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the CancelScanRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> cancelWithServiceResponseAsync(String dataSourceName, String scanName, CancelScanRequest body);

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanHistoryList object if successful.
     */
    ScanHistoryList listHistory(String dataSourceName, String scanName);

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ScanHistoryList> listHistoryAsync(String dataSourceName, String scanName, final ServiceCallback<ScanHistoryList> serviceCallback);

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanHistoryList object
     */
    Observable<ScanHistoryList> listHistoryAsync(String dataSourceName, String scanName);

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanHistoryList object
     */
    Observable<ServiceResponse<ScanHistoryList>> listHistoryWithServiceResponseAsync(String dataSourceName, String scanName);
    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanHistoryList object if successful.
     */
    ScanHistoryList listHistory(String dataSourceName, String scanName, String skipToken);

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ScanHistoryList> listHistoryAsync(String dataSourceName, String scanName, String skipToken, final ServiceCallback<ScanHistoryList> serviceCallback);

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanHistoryList object
     */
    Observable<ScanHistoryList> listHistoryAsync(String dataSourceName, String scanName, String skipToken);

    /**
     * Lists the scan history of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanHistoryList object
     */
    Observable<ServiceResponse<ScanHistoryList>> listHistoryWithServiceResponseAsync(String dataSourceName, String scanName, String skipToken);

    /**
     * Creates an instance of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Scan value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Scan object if successful.
     */
    Scan createOrUpdate(String dataSourceName, String scanName, Scan body);

    /**
     * Creates an instance of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Scan value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Scan> createOrUpdateAsync(String dataSourceName, String scanName, Scan body, final ServiceCallback<Scan> serviceCallback);

    /**
     * Creates an instance of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Scan value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Scan object
     */
    Observable<Scan> createOrUpdateAsync(String dataSourceName, String scanName, Scan body);

    /**
     * Creates an instance of a scan.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param body the Scan value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Scan object
     */
    Observable<ServiceResponse<Scan>> createOrUpdateWithServiceResponseAsync(String dataSourceName, String scanName, Scan body);

    /**
     * Gets a scan information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Scan object if successful.
     */
    Scan get(String dataSourceName, String scanName);

    /**
     * Gets a scan information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Scan> getAsync(String dataSourceName, String scanName, final ServiceCallback<Scan> serviceCallback);

    /**
     * Gets a scan information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Scan object
     */
    Observable<Scan> getAsync(String dataSourceName, String scanName);

    /**
     * Gets a scan information.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Scan object
     */
    Observable<ServiceResponse<Scan>> getWithServiceResponseAsync(String dataSourceName, String scanName);

    /**
     * Deletes the scan associated with the data source.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String dataSourceName, String scanName);

    /**
     * Deletes the scan associated with the data source.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String dataSourceName, String scanName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the scan associated with the data source.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String dataSourceName, String scanName);

    /**
     * Deletes the scan associated with the data source.
     *
     * @param dataSourceName the String value
     * @param scanName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String dataSourceName, String scanName);

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanList object if successful.
     */
    ScanList listByDataSource(String dataSourceName);

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ScanList> listByDataSourceAsync(String dataSourceName, final ServiceCallback<ScanList> serviceCallback);

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanList object
     */
    Observable<ScanList> listByDataSourceAsync(String dataSourceName);

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanList object
     */
    Observable<ServiceResponse<ScanList>> listByDataSourceWithServiceResponseAsync(String dataSourceName);
    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScanList object if successful.
     */
    ScanList listByDataSource(String dataSourceName, String skipToken);

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ScanList> listByDataSourceAsync(String dataSourceName, String skipToken, final ServiceCallback<ScanList> serviceCallback);

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanList object
     */
    Observable<ScanList> listByDataSourceAsync(String dataSourceName, String skipToken);

    /**
     * List scans in data source.
     *
     * @param dataSourceName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScanList object
     */
    Observable<ServiceResponse<ScanList>> listByDataSourceWithServiceResponseAsync(String dataSourceName, String skipToken);

}
