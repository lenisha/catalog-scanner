/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.msft.babylonscanningservice.implementation;

import retrofit2.Retrofit;
import com.msft.babylonscanningservice.ClassificationRules;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import com.msft.babylonscanningservice.models.ClassificationRule;
import com.msft.babylonscanningservice.models.ClassificationRuleList;
import com.msft.babylonscanningservice.models.ClassificationRuleVersionAction;
import com.msft.babylonscanningservice.models.ErrorResponseModelException;
import com.msft.babylonscanningservice.models.OperationResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HTTP;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import retrofit2.http.Query;
import rx.Observable;
import rx.functions.Func1;

/**
 * An instance of this class provides access to all the operations defined
 * in ClassificationRules.
 */
public class ClassificationRulesImpl implements ClassificationRules {
    /** The Retrofit service to perform REST calls. */
    private ClassificationRulesService service;
    /** The service client containing this operation class. */
    private MicrosoftScanningClientImpl client;

    /**
     * Initializes an instance of ClassificationRules.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ClassificationRulesImpl(Retrofit retrofit, MicrosoftScanningClientImpl client) {
        this.service = retrofit.create(ClassificationRulesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ClassificationRules to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ClassificationRulesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.ClassificationRules get" })
        @GET("classificationrules/{classificationRuleName}")
        Observable<Response<ResponseBody>> get(@Path("classificationRuleName") String classificationRuleName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.ClassificationRules createOrUpdate" })
        @PUT("classificationrules/{classificationRuleName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("classificationRuleName") String classificationRuleName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion, @Body ClassificationRule body);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.ClassificationRules delete" })
        @HTTP(path = "classificationrules/{classificationRuleName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("classificationRuleName") String classificationRuleName, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.ClassificationRules listAll" })
        @GET("classificationrules")
        Observable<Response<ResponseBody>> listAll(@Query("$skipToken") String skipToken, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.ClassificationRules listVersionsByClassificationRuleName" })
        @GET("classificationrules/{classificationRuleName}/versions")
        Observable<Response<ResponseBody>> listVersionsByClassificationRuleName(@Path("classificationRuleName") String classificationRuleName, @Query("$skipToken") String skipToken, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.msft.babylonscanningservice.ClassificationRules setClassificationActionForVersion" })
        @POST("classificationrules/{classificationRuleName}/versions/{classificationRuleVersion}/setclassificationaction")
        Observable<Response<ResponseBody>> setClassificationActionForVersion(@Path("classificationRuleName") String classificationRuleName, @Path("classificationRuleVersion") int classificationRuleVersion, @Header("x-ms-account-id") String accountId, @Header("x-ms-account-name") String accountName, @Query("api-version") String apiVersion, @Body ClassificationRuleVersionAction body);

    }

    /**
     * Get a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRule object if successful.
     */
    public ClassificationRule get(String classificationRuleName) {
        return getWithServiceResponseAsync(classificationRuleName).toBlocking().single().body();
    }

    /**
     * Get a classification rule.
     *
     * @param classificationRuleName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClassificationRule> getAsync(String classificationRuleName, final ServiceCallback<ClassificationRule> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(classificationRuleName), serviceCallback);
    }

    /**
     * Get a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    public Observable<ClassificationRule> getAsync(String classificationRuleName) {
        return getWithServiceResponseAsync(classificationRuleName).map(new Func1<ServiceResponse<ClassificationRule>, ClassificationRule>() {
            @Override
            public ClassificationRule call(ServiceResponse<ClassificationRule> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    public Observable<ServiceResponse<ClassificationRule>> getWithServiceResponseAsync(String classificationRuleName) {
        if (classificationRuleName == null) {
            throw new IllegalArgumentException("Parameter classificationRuleName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(classificationRuleName, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClassificationRule>>>() {
                @Override
                public Observable<ServiceResponse<ClassificationRule>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClassificationRule> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClassificationRule> getDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClassificationRule, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClassificationRule>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRule object if successful.
     */
    public ClassificationRule createOrUpdate(String classificationRuleName) {
        return createOrUpdateWithServiceResponseAsync(classificationRuleName).toBlocking().single().body();
    }

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClassificationRule> createOrUpdateAsync(String classificationRuleName, final ServiceCallback<ClassificationRule> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(classificationRuleName), serviceCallback);
    }

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    public Observable<ClassificationRule> createOrUpdateAsync(String classificationRuleName) {
        return createOrUpdateWithServiceResponseAsync(classificationRuleName).map(new Func1<ServiceResponse<ClassificationRule>, ClassificationRule>() {
            @Override
            public ClassificationRule call(ServiceResponse<ClassificationRule> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    public Observable<ServiceResponse<ClassificationRule>> createOrUpdateWithServiceResponseAsync(String classificationRuleName) {
        if (classificationRuleName == null) {
            throw new IllegalArgumentException("Parameter classificationRuleName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ClassificationRule body = null;
        return service.createOrUpdate(classificationRuleName, this.client.accountId(), this.client.accountName(), this.client.apiVersion(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClassificationRule>>>() {
                @Override
                public Observable<ServiceResponse<ClassificationRule>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClassificationRule> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param body the ClassificationRule value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRule object if successful.
     */
    public ClassificationRule createOrUpdate(String classificationRuleName, ClassificationRule body) {
        return createOrUpdateWithServiceResponseAsync(classificationRuleName, body).toBlocking().single().body();
    }

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param body the ClassificationRule value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClassificationRule> createOrUpdateAsync(String classificationRuleName, ClassificationRule body, final ServiceCallback<ClassificationRule> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(classificationRuleName, body), serviceCallback);
    }

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param body the ClassificationRule value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    public Observable<ClassificationRule> createOrUpdateAsync(String classificationRuleName, ClassificationRule body) {
        return createOrUpdateWithServiceResponseAsync(classificationRuleName, body).map(new Func1<ServiceResponse<ClassificationRule>, ClassificationRule>() {
            @Override
            public ClassificationRule call(ServiceResponse<ClassificationRule> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or Updates a classification rule.
     *
     * @param classificationRuleName the String value
     * @param body the ClassificationRule value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRule object
     */
    public Observable<ServiceResponse<ClassificationRule>> createOrUpdateWithServiceResponseAsync(String classificationRuleName, ClassificationRule body) {
        if (classificationRuleName == null) {
            throw new IllegalArgumentException("Parameter classificationRuleName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(body);
        return service.createOrUpdate(classificationRuleName, this.client.accountId(), this.client.accountName(), this.client.apiVersion(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClassificationRule>>>() {
                @Override
                public Observable<ServiceResponse<ClassificationRule>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClassificationRule> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClassificationRule> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClassificationRule, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClassificationRule>() { }.getType())
                .register(201, new TypeToken<ClassificationRule>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Deletes a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String classificationRuleName) {
        deleteWithServiceResponseAsync(classificationRuleName).toBlocking().single().body();
    }

    /**
     * Deletes a classification rule.
     *
     * @param classificationRuleName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String classificationRuleName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(classificationRuleName), serviceCallback);
    }

    /**
     * Deletes a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String classificationRuleName) {
        return deleteWithServiceResponseAsync(classificationRuleName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String classificationRuleName) {
        if (classificationRuleName == null) {
            throw new IllegalArgumentException("Parameter classificationRuleName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(classificationRuleName, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * List classification rules in Account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRuleList object if successful.
     */
    public ClassificationRuleList listAll() {
        return listAllWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * List classification rules in Account.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClassificationRuleList> listAllAsync(final ServiceCallback<ClassificationRuleList> serviceCallback) {
        return ServiceFuture.fromResponse(listAllWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List classification rules in Account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    public Observable<ClassificationRuleList> listAllAsync() {
        return listAllWithServiceResponseAsync().map(new Func1<ServiceResponse<ClassificationRuleList>, ClassificationRuleList>() {
            @Override
            public ClassificationRuleList call(ServiceResponse<ClassificationRuleList> response) {
                return response.body();
            }
        });
    }

    /**
     * List classification rules in Account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    public Observable<ServiceResponse<ClassificationRuleList>> listAllWithServiceResponseAsync() {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.listAll(skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClassificationRuleList>>>() {
                @Override
                public Observable<ServiceResponse<ClassificationRuleList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClassificationRuleList> clientResponse = listAllDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List classification rules in Account.
     *
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRuleList object if successful.
     */
    public ClassificationRuleList listAll(String skipToken) {
        return listAllWithServiceResponseAsync(skipToken).toBlocking().single().body();
    }

    /**
     * List classification rules in Account.
     *
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClassificationRuleList> listAllAsync(String skipToken, final ServiceCallback<ClassificationRuleList> serviceCallback) {
        return ServiceFuture.fromResponse(listAllWithServiceResponseAsync(skipToken), serviceCallback);
    }

    /**
     * List classification rules in Account.
     *
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    public Observable<ClassificationRuleList> listAllAsync(String skipToken) {
        return listAllWithServiceResponseAsync(skipToken).map(new Func1<ServiceResponse<ClassificationRuleList>, ClassificationRuleList>() {
            @Override
            public ClassificationRuleList call(ServiceResponse<ClassificationRuleList> response) {
                return response.body();
            }
        });
    }

    /**
     * List classification rules in Account.
     *
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    public Observable<ServiceResponse<ClassificationRuleList>> listAllWithServiceResponseAsync(String skipToken) {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listAll(skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClassificationRuleList>>>() {
                @Override
                public Observable<ServiceResponse<ClassificationRuleList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClassificationRuleList> clientResponse = listAllDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClassificationRuleList> listAllDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClassificationRuleList, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClassificationRuleList>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRuleList object if successful.
     */
    public ClassificationRuleList listVersionsByClassificationRuleName(String classificationRuleName) {
        return listVersionsByClassificationRuleNameWithServiceResponseAsync(classificationRuleName).toBlocking().single().body();
    }

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClassificationRuleList> listVersionsByClassificationRuleNameAsync(String classificationRuleName, final ServiceCallback<ClassificationRuleList> serviceCallback) {
        return ServiceFuture.fromResponse(listVersionsByClassificationRuleNameWithServiceResponseAsync(classificationRuleName), serviceCallback);
    }

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    public Observable<ClassificationRuleList> listVersionsByClassificationRuleNameAsync(String classificationRuleName) {
        return listVersionsByClassificationRuleNameWithServiceResponseAsync(classificationRuleName).map(new Func1<ServiceResponse<ClassificationRuleList>, ClassificationRuleList>() {
            @Override
            public ClassificationRuleList call(ServiceResponse<ClassificationRuleList> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    public Observable<ServiceResponse<ClassificationRuleList>> listVersionsByClassificationRuleNameWithServiceResponseAsync(String classificationRuleName) {
        if (classificationRuleName == null) {
            throw new IllegalArgumentException("Parameter classificationRuleName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.listVersionsByClassificationRuleName(classificationRuleName, skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClassificationRuleList>>>() {
                @Override
                public Observable<ServiceResponse<ClassificationRuleList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClassificationRuleList> clientResponse = listVersionsByClassificationRuleNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassificationRuleList object if successful.
     */
    public ClassificationRuleList listVersionsByClassificationRuleName(String classificationRuleName, String skipToken) {
        return listVersionsByClassificationRuleNameWithServiceResponseAsync(classificationRuleName, skipToken).toBlocking().single().body();
    }

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param skipToken the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClassificationRuleList> listVersionsByClassificationRuleNameAsync(String classificationRuleName, String skipToken, final ServiceCallback<ClassificationRuleList> serviceCallback) {
        return ServiceFuture.fromResponse(listVersionsByClassificationRuleNameWithServiceResponseAsync(classificationRuleName, skipToken), serviceCallback);
    }

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    public Observable<ClassificationRuleList> listVersionsByClassificationRuleNameAsync(String classificationRuleName, String skipToken) {
        return listVersionsByClassificationRuleNameWithServiceResponseAsync(classificationRuleName, skipToken).map(new Func1<ServiceResponse<ClassificationRuleList>, ClassificationRuleList>() {
            @Override
            public ClassificationRuleList call(ServiceResponse<ClassificationRuleList> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the rule versions of a classification rule.
     *
     * @param classificationRuleName the String value
     * @param skipToken the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassificationRuleList object
     */
    public Observable<ServiceResponse<ClassificationRuleList>> listVersionsByClassificationRuleNameWithServiceResponseAsync(String classificationRuleName, String skipToken) {
        if (classificationRuleName == null) {
            throw new IllegalArgumentException("Parameter classificationRuleName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listVersionsByClassificationRuleName(classificationRuleName, skipToken, this.client.accountId(), this.client.accountName(), this.client.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClassificationRuleList>>>() {
                @Override
                public Observable<ServiceResponse<ClassificationRuleList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClassificationRuleList> clientResponse = listVersionsByClassificationRuleNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClassificationRuleList> listVersionsByClassificationRuleNameDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClassificationRuleList, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClassificationRuleList>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

    /**
     * Sets Classification Action on a specific classification rule version.
     *
     * @param classificationRuleName the String value
     * @param classificationRuleVersion the int value
     * @param body the ClassificationRuleVersionAction value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseModelException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResponse object if successful.
     */
    public OperationResponse setClassificationActionForVersion(String classificationRuleName, int classificationRuleVersion, ClassificationRuleVersionAction body) {
        return setClassificationActionForVersionWithServiceResponseAsync(classificationRuleName, classificationRuleVersion, body).toBlocking().single().body();
    }

    /**
     * Sets Classification Action on a specific classification rule version.
     *
     * @param classificationRuleName the String value
     * @param classificationRuleVersion the int value
     * @param body the ClassificationRuleVersionAction value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResponse> setClassificationActionForVersionAsync(String classificationRuleName, int classificationRuleVersion, ClassificationRuleVersionAction body, final ServiceCallback<OperationResponse> serviceCallback) {
        return ServiceFuture.fromResponse(setClassificationActionForVersionWithServiceResponseAsync(classificationRuleName, classificationRuleVersion, body), serviceCallback);
    }

    /**
     * Sets Classification Action on a specific classification rule version.
     *
     * @param classificationRuleName the String value
     * @param classificationRuleVersion the int value
     * @param body the ClassificationRuleVersionAction value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    public Observable<OperationResponse> setClassificationActionForVersionAsync(String classificationRuleName, int classificationRuleVersion, ClassificationRuleVersionAction body) {
        return setClassificationActionForVersionWithServiceResponseAsync(classificationRuleName, classificationRuleVersion, body).map(new Func1<ServiceResponse<OperationResponse>, OperationResponse>() {
            @Override
            public OperationResponse call(ServiceResponse<OperationResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Sets Classification Action on a specific classification rule version.
     *
     * @param classificationRuleName the String value
     * @param classificationRuleVersion the int value
     * @param body the ClassificationRuleVersionAction value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResponse object
     */
    public Observable<ServiceResponse<OperationResponse>> setClassificationActionForVersionWithServiceResponseAsync(String classificationRuleName, int classificationRuleVersion, ClassificationRuleVersionAction body) {
        if (classificationRuleName == null) {
            throw new IllegalArgumentException("Parameter classificationRuleName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.setClassificationActionForVersion(classificationRuleName, classificationRuleVersion, this.client.accountId(), this.client.accountName(), this.client.apiVersion(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationResponse>>>() {
                @Override
                public Observable<ServiceResponse<OperationResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationResponse> clientResponse = setClassificationActionForVersionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationResponse> setClassificationActionForVersionDelegate(Response<ResponseBody> response) throws ErrorResponseModelException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationResponse, ErrorResponseModelException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationResponse>() { }.getType())
                .register(202, new TypeToken<OperationResponse>() { }.getType())
                .registerError(ErrorResponseModelException.class)
                .build(response);
    }

}
