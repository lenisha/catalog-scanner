// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ScannerBabylonService.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [JsonTransformation]
    public partial class Filter : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Filter class.
        /// </summary>
        public Filter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Filter class.
        /// </summary>
        public Filter(string id = default(string), string name = default(string), IList<string> excludeUriPrefixes = default(IList<string>), IList<string> includeUriPrefixes = default(IList<string>))
            : base(id, name)
        {
            ExcludeUriPrefixes = excludeUriPrefixes;
            IncludeUriPrefixes = includeUriPrefixes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.excludeUriPrefixes")]
        public IList<string> ExcludeUriPrefixes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.includeUriPrefixes")]
        public IList<string> IncludeUriPrefixes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExcludeUriPrefixes != null)
            {
                if (ExcludeUriPrefixes.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(ExcludeUriPrefixes)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "ExcludeUriPrefixes");
                }
            }
            if (IncludeUriPrefixes != null)
            {
                if (IncludeUriPrefixes.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(IncludeUriPrefixes)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "IncludeUriPrefixes");
                }
            }
        }
    }
}
