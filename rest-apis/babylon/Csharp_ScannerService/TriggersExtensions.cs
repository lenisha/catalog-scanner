// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ScannerBabylonService
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Triggers.
    /// </summary>
    public static partial class TriggersExtensions
    {
            /// <summary>
            /// Gets trigger information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='triggerName'>
            /// </param>
            public static Trigger GetTrigger(this ITriggers operations, string dataSourceName, string scanName, string triggerName)
            {
                return operations.GetTriggerAsync(dataSourceName, scanName, triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets trigger information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='triggerName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Trigger> GetTriggerAsync(this ITriggers operations, string dataSourceName, string scanName, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggerWithHttpMessagesAsync(dataSourceName, scanName, triggerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an instance of a trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='triggerName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Trigger CreateTrigger(this ITriggers operations, string dataSourceName, string scanName, string triggerName, Trigger body)
            {
                return operations.CreateTriggerAsync(dataSourceName, scanName, triggerName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an instance of a trigger
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='triggerName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Trigger> CreateTriggerAsync(this ITriggers operations, string dataSourceName, string scanName, string triggerName, Trigger body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTriggerWithHttpMessagesAsync(dataSourceName, scanName, triggerName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the trigger associated with the scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='triggerName'>
            /// </param>
            public static void DeleteTrigger(this ITriggers operations, string dataSourceName, string scanName, string triggerName)
            {
                operations.DeleteTriggerAsync(dataSourceName, scanName, triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the trigger associated with the scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='triggerName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTriggerAsync(this ITriggers operations, string dataSourceName, string scanName, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTriggerWithHttpMessagesAsync(dataSourceName, scanName, triggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List triggers in Scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='skipToken'>
            /// </param>
            public static TriggerList ListByScan(this ITriggers operations, string dataSourceName, string scanName, string skipToken = default(string))
            {
                return operations.ListByScanAsync(dataSourceName, scanName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List triggers in Scan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataSourceName'>
            /// </param>
            /// <param name='scanName'>
            /// </param>
            /// <param name='skipToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerList> ListByScanAsync(this ITriggers operations, string dataSourceName, string scanName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByScanWithHttpMessagesAsync(dataSourceName, scanName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
